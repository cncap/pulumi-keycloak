// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.keycloak.outputs.GetClientDescriptionConverterProtocolMapper;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientDescriptionConverterResult {
    private final Map<String,Object> access;
    private final String adminUrl;
    private final Map<String,Object> attributes;
    private final Map<String,Object> authenticationFlowBindingOverrides;
    private final Boolean authorizationServicesEnabled;
    private final Map<String,Object> authorizationSettings;
    private final String baseUrl;
    private final Boolean bearerOnly;
    private final String body;
    private final String clientAuthenticatorType;
    private final String clientId;
    private final String consentRequired;
    private final List<String> defaultClientScopes;
    private final List<String> defaultRoles;
    private final String description;
    private final Boolean directAccessGrantsEnabled;
    private final Boolean enabled;
    private final Boolean frontchannelLogout;
    private final Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final Boolean implicitFlowEnabled;
    private final String name;
    private final Integer notBefore;
    private final List<String> optionalClientScopes;
    private final String origin;
    private final String protocol;
    private final List<GetClientDescriptionConverterProtocolMapper> protocolMappers;
    private final Boolean publicClient;
    private final String realmId;
    private final List<String> redirectUris;
    private final Map<String,Object> registeredNodes;
    private final String registrationAccessToken;
    private final String rootUrl;
    private final String secret;
    private final Boolean serviceAccountsEnabled;
    private final Boolean standardFlowEnabled;
    private final Boolean surrogateAuthRequired;
    private final List<String> webOrigins;

    @CustomType.Constructor
    private GetClientDescriptionConverterResult(
        @CustomType.Parameter("access") Map<String,Object> access,
        @CustomType.Parameter("adminUrl") String adminUrl,
        @CustomType.Parameter("attributes") Map<String,Object> attributes,
        @CustomType.Parameter("authenticationFlowBindingOverrides") Map<String,Object> authenticationFlowBindingOverrides,
        @CustomType.Parameter("authorizationServicesEnabled") Boolean authorizationServicesEnabled,
        @CustomType.Parameter("authorizationSettings") Map<String,Object> authorizationSettings,
        @CustomType.Parameter("baseUrl") String baseUrl,
        @CustomType.Parameter("bearerOnly") Boolean bearerOnly,
        @CustomType.Parameter("body") String body,
        @CustomType.Parameter("clientAuthenticatorType") String clientAuthenticatorType,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("consentRequired") String consentRequired,
        @CustomType.Parameter("defaultClientScopes") List<String> defaultClientScopes,
        @CustomType.Parameter("defaultRoles") List<String> defaultRoles,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("directAccessGrantsEnabled") Boolean directAccessGrantsEnabled,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("frontchannelLogout") Boolean frontchannelLogout,
        @CustomType.Parameter("fullScopeAllowed") Boolean fullScopeAllowed,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("implicitFlowEnabled") Boolean implicitFlowEnabled,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("notBefore") Integer notBefore,
        @CustomType.Parameter("optionalClientScopes") List<String> optionalClientScopes,
        @CustomType.Parameter("origin") String origin,
        @CustomType.Parameter("protocol") String protocol,
        @CustomType.Parameter("protocolMappers") List<GetClientDescriptionConverterProtocolMapper> protocolMappers,
        @CustomType.Parameter("publicClient") Boolean publicClient,
        @CustomType.Parameter("realmId") String realmId,
        @CustomType.Parameter("redirectUris") List<String> redirectUris,
        @CustomType.Parameter("registeredNodes") Map<String,Object> registeredNodes,
        @CustomType.Parameter("registrationAccessToken") String registrationAccessToken,
        @CustomType.Parameter("rootUrl") String rootUrl,
        @CustomType.Parameter("secret") String secret,
        @CustomType.Parameter("serviceAccountsEnabled") Boolean serviceAccountsEnabled,
        @CustomType.Parameter("standardFlowEnabled") Boolean standardFlowEnabled,
        @CustomType.Parameter("surrogateAuthRequired") Boolean surrogateAuthRequired,
        @CustomType.Parameter("webOrigins") List<String> webOrigins) {
        this.access = access;
        this.adminUrl = adminUrl;
        this.attributes = attributes;
        this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
        this.authorizationServicesEnabled = authorizationServicesEnabled;
        this.authorizationSettings = authorizationSettings;
        this.baseUrl = baseUrl;
        this.bearerOnly = bearerOnly;
        this.body = body;
        this.clientAuthenticatorType = clientAuthenticatorType;
        this.clientId = clientId;
        this.consentRequired = consentRequired;
        this.defaultClientScopes = defaultClientScopes;
        this.defaultRoles = defaultRoles;
        this.description = description;
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        this.enabled = enabled;
        this.frontchannelLogout = frontchannelLogout;
        this.fullScopeAllowed = fullScopeAllowed;
        this.id = id;
        this.implicitFlowEnabled = implicitFlowEnabled;
        this.name = name;
        this.notBefore = notBefore;
        this.optionalClientScopes = optionalClientScopes;
        this.origin = origin;
        this.protocol = protocol;
        this.protocolMappers = protocolMappers;
        this.publicClient = publicClient;
        this.realmId = realmId;
        this.redirectUris = redirectUris;
        this.registeredNodes = registeredNodes;
        this.registrationAccessToken = registrationAccessToken;
        this.rootUrl = rootUrl;
        this.secret = secret;
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        this.standardFlowEnabled = standardFlowEnabled;
        this.surrogateAuthRequired = surrogateAuthRequired;
        this.webOrigins = webOrigins;
    }

    public Map<String,Object> access() {
        return this.access;
    }
    public String adminUrl() {
        return this.adminUrl;
    }
    public Map<String,Object> attributes() {
        return this.attributes;
    }
    public Map<String,Object> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public Boolean authorizationServicesEnabled() {
        return this.authorizationServicesEnabled;
    }
    public Map<String,Object> authorizationSettings() {
        return this.authorizationSettings;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public Boolean bearerOnly() {
        return this.bearerOnly;
    }
    public String body() {
        return this.body;
    }
    public String clientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }
    public String clientId() {
        return this.clientId;
    }
    public String consentRequired() {
        return this.consentRequired;
    }
    public List<String> defaultClientScopes() {
        return this.defaultClientScopes;
    }
    public List<String> defaultRoles() {
        return this.defaultRoles;
    }
    public String description() {
        return this.description;
    }
    public Boolean directAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean frontchannelLogout() {
        return this.frontchannelLogout;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean implicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }
    public String name() {
        return this.name;
    }
    public Integer notBefore() {
        return this.notBefore;
    }
    public List<String> optionalClientScopes() {
        return this.optionalClientScopes;
    }
    public String origin() {
        return this.origin;
    }
    public String protocol() {
        return this.protocol;
    }
    public List<GetClientDescriptionConverterProtocolMapper> protocolMappers() {
        return this.protocolMappers;
    }
    public Boolean publicClient() {
        return this.publicClient;
    }
    public String realmId() {
        return this.realmId;
    }
    public List<String> redirectUris() {
        return this.redirectUris;
    }
    public Map<String,Object> registeredNodes() {
        return this.registeredNodes;
    }
    public String registrationAccessToken() {
        return this.registrationAccessToken;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String secret() {
        return this.secret;
    }
    public Boolean serviceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }
    public Boolean standardFlowEnabled() {
        return this.standardFlowEnabled;
    }
    public Boolean surrogateAuthRequired() {
        return this.surrogateAuthRequired;
    }
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientDescriptionConverterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,Object> access;
        private String adminUrl;
        private Map<String,Object> attributes;
        private Map<String,Object> authenticationFlowBindingOverrides;
        private Boolean authorizationServicesEnabled;
        private Map<String,Object> authorizationSettings;
        private String baseUrl;
        private Boolean bearerOnly;
        private String body;
        private String clientAuthenticatorType;
        private String clientId;
        private String consentRequired;
        private List<String> defaultClientScopes;
        private List<String> defaultRoles;
        private String description;
        private Boolean directAccessGrantsEnabled;
        private Boolean enabled;
        private Boolean frontchannelLogout;
        private Boolean fullScopeAllowed;
        private String id;
        private Boolean implicitFlowEnabled;
        private String name;
        private Integer notBefore;
        private List<String> optionalClientScopes;
        private String origin;
        private String protocol;
        private List<GetClientDescriptionConverterProtocolMapper> protocolMappers;
        private Boolean publicClient;
        private String realmId;
        private List<String> redirectUris;
        private Map<String,Object> registeredNodes;
        private String registrationAccessToken;
        private String rootUrl;
        private String secret;
        private Boolean serviceAccountsEnabled;
        private Boolean standardFlowEnabled;
        private Boolean surrogateAuthRequired;
        private List<String> webOrigins;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClientDescriptionConverterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.adminUrl = defaults.adminUrl;
    	      this.attributes = defaults.attributes;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.authorizationServicesEnabled = defaults.authorizationServicesEnabled;
    	      this.authorizationSettings = defaults.authorizationSettings;
    	      this.baseUrl = defaults.baseUrl;
    	      this.bearerOnly = defaults.bearerOnly;
    	      this.body = defaults.body;
    	      this.clientAuthenticatorType = defaults.clientAuthenticatorType;
    	      this.clientId = defaults.clientId;
    	      this.consentRequired = defaults.consentRequired;
    	      this.defaultClientScopes = defaults.defaultClientScopes;
    	      this.defaultRoles = defaults.defaultRoles;
    	      this.description = defaults.description;
    	      this.directAccessGrantsEnabled = defaults.directAccessGrantsEnabled;
    	      this.enabled = defaults.enabled;
    	      this.frontchannelLogout = defaults.frontchannelLogout;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.implicitFlowEnabled = defaults.implicitFlowEnabled;
    	      this.name = defaults.name;
    	      this.notBefore = defaults.notBefore;
    	      this.optionalClientScopes = defaults.optionalClientScopes;
    	      this.origin = defaults.origin;
    	      this.protocol = defaults.protocol;
    	      this.protocolMappers = defaults.protocolMappers;
    	      this.publicClient = defaults.publicClient;
    	      this.realmId = defaults.realmId;
    	      this.redirectUris = defaults.redirectUris;
    	      this.registeredNodes = defaults.registeredNodes;
    	      this.registrationAccessToken = defaults.registrationAccessToken;
    	      this.rootUrl = defaults.rootUrl;
    	      this.secret = defaults.secret;
    	      this.serviceAccountsEnabled = defaults.serviceAccountsEnabled;
    	      this.standardFlowEnabled = defaults.standardFlowEnabled;
    	      this.surrogateAuthRequired = defaults.surrogateAuthRequired;
    	      this.webOrigins = defaults.webOrigins;
        }

        public Builder access(Map<String,Object> access) {
            this.access = Objects.requireNonNull(access);
            return this;
        }
        public Builder adminUrl(String adminUrl) {
            this.adminUrl = Objects.requireNonNull(adminUrl);
            return this;
        }
        public Builder attributes(Map<String,Object> attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(Map<String,Object> authenticationFlowBindingOverrides) {
            this.authenticationFlowBindingOverrides = Objects.requireNonNull(authenticationFlowBindingOverrides);
            return this;
        }
        public Builder authorizationServicesEnabled(Boolean authorizationServicesEnabled) {
            this.authorizationServicesEnabled = Objects.requireNonNull(authorizationServicesEnabled);
            return this;
        }
        public Builder authorizationSettings(Map<String,Object> authorizationSettings) {
            this.authorizationSettings = Objects.requireNonNull(authorizationSettings);
            return this;
        }
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }
        public Builder bearerOnly(Boolean bearerOnly) {
            this.bearerOnly = Objects.requireNonNull(bearerOnly);
            return this;
        }
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        public Builder clientAuthenticatorType(String clientAuthenticatorType) {
            this.clientAuthenticatorType = Objects.requireNonNull(clientAuthenticatorType);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder consentRequired(String consentRequired) {
            this.consentRequired = Objects.requireNonNull(consentRequired);
            return this;
        }
        public Builder defaultClientScopes(List<String> defaultClientScopes) {
            this.defaultClientScopes = Objects.requireNonNull(defaultClientScopes);
            return this;
        }
        public Builder defaultClientScopes(String... defaultClientScopes) {
            return defaultClientScopes(List.of(defaultClientScopes));
        }
        public Builder defaultRoles(List<String> defaultRoles) {
            this.defaultRoles = Objects.requireNonNull(defaultRoles);
            return this;
        }
        public Builder defaultRoles(String... defaultRoles) {
            return defaultRoles(List.of(defaultRoles));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder directAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
            this.directAccessGrantsEnabled = Objects.requireNonNull(directAccessGrantsEnabled);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder frontchannelLogout(Boolean frontchannelLogout) {
            this.frontchannelLogout = Objects.requireNonNull(frontchannelLogout);
            return this;
        }
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            this.fullScopeAllowed = Objects.requireNonNull(fullScopeAllowed);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder implicitFlowEnabled(Boolean implicitFlowEnabled) {
            this.implicitFlowEnabled = Objects.requireNonNull(implicitFlowEnabled);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder notBefore(Integer notBefore) {
            this.notBefore = Objects.requireNonNull(notBefore);
            return this;
        }
        public Builder optionalClientScopes(List<String> optionalClientScopes) {
            this.optionalClientScopes = Objects.requireNonNull(optionalClientScopes);
            return this;
        }
        public Builder optionalClientScopes(String... optionalClientScopes) {
            return optionalClientScopes(List.of(optionalClientScopes));
        }
        public Builder origin(String origin) {
            this.origin = Objects.requireNonNull(origin);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocolMappers(List<GetClientDescriptionConverterProtocolMapper> protocolMappers) {
            this.protocolMappers = Objects.requireNonNull(protocolMappers);
            return this;
        }
        public Builder protocolMappers(GetClientDescriptionConverterProtocolMapper... protocolMappers) {
            return protocolMappers(List.of(protocolMappers));
        }
        public Builder publicClient(Boolean publicClient) {
            this.publicClient = Objects.requireNonNull(publicClient);
            return this;
        }
        public Builder realmId(String realmId) {
            this.realmId = Objects.requireNonNull(realmId);
            return this;
        }
        public Builder redirectUris(List<String> redirectUris) {
            this.redirectUris = Objects.requireNonNull(redirectUris);
            return this;
        }
        public Builder redirectUris(String... redirectUris) {
            return redirectUris(List.of(redirectUris));
        }
        public Builder registeredNodes(Map<String,Object> registeredNodes) {
            this.registeredNodes = Objects.requireNonNull(registeredNodes);
            return this;
        }
        public Builder registrationAccessToken(String registrationAccessToken) {
            this.registrationAccessToken = Objects.requireNonNull(registrationAccessToken);
            return this;
        }
        public Builder rootUrl(String rootUrl) {
            this.rootUrl = Objects.requireNonNull(rootUrl);
            return this;
        }
        public Builder secret(String secret) {
            this.secret = Objects.requireNonNull(secret);
            return this;
        }
        public Builder serviceAccountsEnabled(Boolean serviceAccountsEnabled) {
            this.serviceAccountsEnabled = Objects.requireNonNull(serviceAccountsEnabled);
            return this;
        }
        public Builder standardFlowEnabled(Boolean standardFlowEnabled) {
            this.standardFlowEnabled = Objects.requireNonNull(standardFlowEnabled);
            return this;
        }
        public Builder surrogateAuthRequired(Boolean surrogateAuthRequired) {
            this.surrogateAuthRequired = Objects.requireNonNull(surrogateAuthRequired);
            return this;
        }
        public Builder webOrigins(List<String> webOrigins) {
            this.webOrigins = Objects.requireNonNull(webOrigins);
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }        public GetClientDescriptionConverterResult build() {
            return new GetClientDescriptionConverterResult(access, adminUrl, attributes, authenticationFlowBindingOverrides, authorizationServicesEnabled, authorizationSettings, baseUrl, bearerOnly, body, clientAuthenticatorType, clientId, consentRequired, defaultClientScopes, defaultRoles, description, directAccessGrantsEnabled, enabled, frontchannelLogout, fullScopeAllowed, id, implicitFlowEnabled, name, notBefore, optionalClientScopes, origin, protocol, protocolMappers, publicClient, realmId, redirectUris, registeredNodes, registrationAccessToken, rootUrl, secret, serviceAccountsEnabled, standardFlowEnabled, surrogateAuthRequired, webOrigins);
        }
    }
}
