// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RealmWebAuthnPasswordlessPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RealmWebAuthnPasswordlessPolicyArgs Empty = new RealmWebAuthnPasswordlessPolicyArgs();

    /**
     * A set of AAGUIDs for which an authenticator can be registered.
     * 
     */
    @Import(name="acceptableAaguids")
    private @Nullable Output<List<String>> acceptableAaguids;

    /**
     * @return A set of AAGUIDs for which an authenticator can be registered.
     * 
     */
    public Optional<Output<List<String>>> acceptableAaguids() {
        return Optional.ofNullable(this.acceptableAaguids);
    }

    /**
     * The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
     * 
     */
    @Import(name="attestationConveyancePreference")
    private @Nullable Output<String> attestationConveyancePreference;

    /**
     * @return The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
     * 
     */
    public Optional<Output<String>> attestationConveyancePreference() {
        return Optional.ofNullable(this.attestationConveyancePreference);
    }

    /**
     * The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
     * 
     */
    @Import(name="authenticatorAttachment")
    private @Nullable Output<String> authenticatorAttachment;

    /**
     * @return The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
     * 
     */
    public Optional<Output<String>> authenticatorAttachment() {
        return Optional.ofNullable(this.authenticatorAttachment);
    }

    /**
     * When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
     * 
     */
    @Import(name="avoidSameAuthenticatorRegister")
    private @Nullable Output<Boolean> avoidSameAuthenticatorRegister;

    /**
     * @return When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> avoidSameAuthenticatorRegister() {
        return Optional.ofNullable(this.avoidSameAuthenticatorRegister);
    }

    /**
     * The timeout value for creating a user&#39;s public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
     * 
     */
    @Import(name="createTimeout")
    private @Nullable Output<Integer> createTimeout;

    /**
     * @return The timeout value for creating a user&#39;s public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
     * 
     */
    public Optional<Output<Integer>> createTimeout() {
        return Optional.ofNullable(this.createTimeout);
    }

    /**
     * A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
     * 
     */
    @Import(name="relyingPartyEntityName")
    private @Nullable Output<String> relyingPartyEntityName;

    /**
     * @return A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
     * 
     */
    public Optional<Output<String>> relyingPartyEntityName() {
        return Optional.ofNullable(this.relyingPartyEntityName);
    }

    /**
     * The WebAuthn relying party ID.
     * 
     */
    @Import(name="relyingPartyId")
    private @Nullable Output<String> relyingPartyId;

    /**
     * @return The WebAuthn relying party ID.
     * 
     */
    public Optional<Output<String>> relyingPartyId() {
        return Optional.ofNullable(this.relyingPartyId);
    }

    /**
     * Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
     * 
     */
    @Import(name="requireResidentKey")
    private @Nullable Output<String> requireResidentKey;

    /**
     * @return Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
     * 
     */
    public Optional<Output<String>> requireResidentKey() {
        return Optional.ofNullable(this.requireResidentKey);
    }

    /**
     * A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
     * 
     */
    @Import(name="signatureAlgorithms")
    private @Nullable Output<List<String>> signatureAlgorithms;

    /**
     * @return A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
     * 
     */
    public Optional<Output<List<String>>> signatureAlgorithms() {
        return Optional.ofNullable(this.signatureAlgorithms);
    }

    /**
     * Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
     * 
     */
    @Import(name="userVerificationRequirement")
    private @Nullable Output<String> userVerificationRequirement;

    /**
     * @return Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
     * 
     */
    public Optional<Output<String>> userVerificationRequirement() {
        return Optional.ofNullable(this.userVerificationRequirement);
    }

    private RealmWebAuthnPasswordlessPolicyArgs() {}

    private RealmWebAuthnPasswordlessPolicyArgs(RealmWebAuthnPasswordlessPolicyArgs $) {
        this.acceptableAaguids = $.acceptableAaguids;
        this.attestationConveyancePreference = $.attestationConveyancePreference;
        this.authenticatorAttachment = $.authenticatorAttachment;
        this.avoidSameAuthenticatorRegister = $.avoidSameAuthenticatorRegister;
        this.createTimeout = $.createTimeout;
        this.relyingPartyEntityName = $.relyingPartyEntityName;
        this.relyingPartyId = $.relyingPartyId;
        this.requireResidentKey = $.requireResidentKey;
        this.signatureAlgorithms = $.signatureAlgorithms;
        this.userVerificationRequirement = $.userVerificationRequirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RealmWebAuthnPasswordlessPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RealmWebAuthnPasswordlessPolicyArgs $;

        public Builder() {
            $ = new RealmWebAuthnPasswordlessPolicyArgs();
        }

        public Builder(RealmWebAuthnPasswordlessPolicyArgs defaults) {
            $ = new RealmWebAuthnPasswordlessPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptableAaguids A set of AAGUIDs for which an authenticator can be registered.
         * 
         * @return builder
         * 
         */
        public Builder acceptableAaguids(@Nullable Output<List<String>> acceptableAaguids) {
            $.acceptableAaguids = acceptableAaguids;
            return this;
        }

        /**
         * @param acceptableAaguids A set of AAGUIDs for which an authenticator can be registered.
         * 
         * @return builder
         * 
         */
        public Builder acceptableAaguids(List<String> acceptableAaguids) {
            return acceptableAaguids(Output.of(acceptableAaguids));
        }

        /**
         * @param acceptableAaguids A set of AAGUIDs for which an authenticator can be registered.
         * 
         * @return builder
         * 
         */
        public Builder acceptableAaguids(String... acceptableAaguids) {
            return acceptableAaguids(List.of(acceptableAaguids));
        }

        /**
         * @param attestationConveyancePreference The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder attestationConveyancePreference(@Nullable Output<String> attestationConveyancePreference) {
            $.attestationConveyancePreference = attestationConveyancePreference;
            return this;
        }

        /**
         * @param attestationConveyancePreference The preference of how to generate a WebAuthn attestation statement. Valid options are `not specified`, `none`, `indirect`, `direct`, or `enterprise`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder attestationConveyancePreference(String attestationConveyancePreference) {
            return attestationConveyancePreference(Output.of(attestationConveyancePreference));
        }

        /**
         * @param authenticatorAttachment The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorAttachment(@Nullable Output<String> authenticatorAttachment) {
            $.authenticatorAttachment = authenticatorAttachment;
            return this;
        }

        /**
         * @param authenticatorAttachment The acceptable attachment pattern for the WebAuthn authenticator. Valid options are `not specified`, `platform`, or `cross-platform`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder authenticatorAttachment(String authenticatorAttachment) {
            return authenticatorAttachment(Output.of(authenticatorAttachment));
        }

        /**
         * @param avoidSameAuthenticatorRegister When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder avoidSameAuthenticatorRegister(@Nullable Output<Boolean> avoidSameAuthenticatorRegister) {
            $.avoidSameAuthenticatorRegister = avoidSameAuthenticatorRegister;
            return this;
        }

        /**
         * @param avoidSameAuthenticatorRegister When `true`, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder avoidSameAuthenticatorRegister(Boolean avoidSameAuthenticatorRegister) {
            return avoidSameAuthenticatorRegister(Output.of(avoidSameAuthenticatorRegister));
        }

        /**
         * @param createTimeout The timeout value for creating a user&#39;s public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder createTimeout(@Nullable Output<Integer> createTimeout) {
            $.createTimeout = createTimeout;
            return this;
        }

        /**
         * @param createTimeout The timeout value for creating a user&#39;s public key credential in seconds. When set to `0`, this timeout option is not adapted. Defaults to `0`.
         * 
         * @return builder
         * 
         */
        public Builder createTimeout(Integer createTimeout) {
            return createTimeout(Output.of(createTimeout));
        }

        /**
         * @param relyingPartyEntityName A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
         * 
         * @return builder
         * 
         */
        public Builder relyingPartyEntityName(@Nullable Output<String> relyingPartyEntityName) {
            $.relyingPartyEntityName = relyingPartyEntityName;
            return this;
        }

        /**
         * @param relyingPartyEntityName A human readable server name for the WebAuthn Relying Party. Defaults to `keycloak`.
         * 
         * @return builder
         * 
         */
        public Builder relyingPartyEntityName(String relyingPartyEntityName) {
            return relyingPartyEntityName(Output.of(relyingPartyEntityName));
        }

        /**
         * @param relyingPartyId The WebAuthn relying party ID.
         * 
         * @return builder
         * 
         */
        public Builder relyingPartyId(@Nullable Output<String> relyingPartyId) {
            $.relyingPartyId = relyingPartyId;
            return this;
        }

        /**
         * @param relyingPartyId The WebAuthn relying party ID.
         * 
         * @return builder
         * 
         */
        public Builder relyingPartyId(String relyingPartyId) {
            return relyingPartyId(Output.of(relyingPartyId));
        }

        /**
         * @param requireResidentKey Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder requireResidentKey(@Nullable Output<String> requireResidentKey) {
            $.requireResidentKey = requireResidentKey;
            return this;
        }

        /**
         * @param requireResidentKey Specifies whether or not a public key should be created to represent the resident key. Valid options are `not specified`, `Yes`, or `No`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder requireResidentKey(String requireResidentKey) {
            return requireResidentKey(Output.of(requireResidentKey));
        }

        /**
         * @param signatureAlgorithms A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithms(@Nullable Output<List<String>> signatureAlgorithms) {
            $.signatureAlgorithms = signatureAlgorithms;
            return this;
        }

        /**
         * @param signatureAlgorithms A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithms(List<String> signatureAlgorithms) {
            return signatureAlgorithms(Output.of(signatureAlgorithms));
        }

        /**
         * @param signatureAlgorithms A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are `ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, and `RS1`.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithms(String... signatureAlgorithms) {
            return signatureAlgorithms(List.of(signatureAlgorithms));
        }

        /**
         * @param userVerificationRequirement Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder userVerificationRequirement(@Nullable Output<String> userVerificationRequirement) {
            $.userVerificationRequirement = userVerificationRequirement;
            return this;
        }

        /**
         * @param userVerificationRequirement Specifies the policy for verifying a user logging in via WebAuthn. Valid options are `not specified`, `required`, `preferred`, or `discouraged`. Defaults to `not specified`.
         * 
         * @return builder
         * 
         */
        public Builder userVerificationRequirement(String userVerificationRequirement) {
            return userVerificationRequirement(Output.of(userVerificationRequirement));
        }

        public RealmWebAuthnPasswordlessPolicyArgs build() {
            return $;
        }
    }

}
