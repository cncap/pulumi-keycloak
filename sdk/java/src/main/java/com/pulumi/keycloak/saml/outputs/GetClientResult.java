// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.saml.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.keycloak.saml.outputs.GetClientAuthenticationFlowBindingOverride;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClientResult {
    private final String assertionConsumerPostUrl;
    private final String assertionConsumerRedirectUrl;
    private final List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
    private final String baseUrl;
    private final String canonicalizationMethod;
    private final String clientId;
    private final Boolean clientSignatureRequired;
    private final String description;
    private final Boolean enabled;
    private final Boolean encryptAssertions;
    private final String encryptionCertificate;
    private final String encryptionCertificateSha1;
    private final Map<String,Object> extraConfig;
    private final Boolean forceNameIdFormat;
    private final Boolean forcePostBinding;
    private final Boolean frontChannelLogout;
    private final Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String idpInitiatedSsoRelayState;
    private final String idpInitiatedSsoUrlName;
    private final Boolean includeAuthnStatement;
    private final String loginTheme;
    private final String logoutServicePostBindingUrl;
    private final String logoutServiceRedirectBindingUrl;
    private final String masterSamlProcessingUrl;
    private final String name;
    private final String nameIdFormat;
    private final String realmId;
    private final String rootUrl;
    private final String samlSignatureKeyName;
    private final Boolean signAssertions;
    private final Boolean signDocuments;
    private final String signatureAlgorithm;
    private final String signatureKeyName;
    private final String signingCertificate;
    private final String signingCertificateSha1;
    private final String signingPrivateKey;
    private final String signingPrivateKeySha1;
    private final List<String> validRedirectUris;

    @CustomType.Constructor
    private GetClientResult(
        @CustomType.Parameter("assertionConsumerPostUrl") String assertionConsumerPostUrl,
        @CustomType.Parameter("assertionConsumerRedirectUrl") String assertionConsumerRedirectUrl,
        @CustomType.Parameter("authenticationFlowBindingOverrides") List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides,
        @CustomType.Parameter("baseUrl") String baseUrl,
        @CustomType.Parameter("canonicalizationMethod") String canonicalizationMethod,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientSignatureRequired") Boolean clientSignatureRequired,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("encryptAssertions") Boolean encryptAssertions,
        @CustomType.Parameter("encryptionCertificate") String encryptionCertificate,
        @CustomType.Parameter("encryptionCertificateSha1") String encryptionCertificateSha1,
        @CustomType.Parameter("extraConfig") Map<String,Object> extraConfig,
        @CustomType.Parameter("forceNameIdFormat") Boolean forceNameIdFormat,
        @CustomType.Parameter("forcePostBinding") Boolean forcePostBinding,
        @CustomType.Parameter("frontChannelLogout") Boolean frontChannelLogout,
        @CustomType.Parameter("fullScopeAllowed") Boolean fullScopeAllowed,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("idpInitiatedSsoRelayState") String idpInitiatedSsoRelayState,
        @CustomType.Parameter("idpInitiatedSsoUrlName") String idpInitiatedSsoUrlName,
        @CustomType.Parameter("includeAuthnStatement") Boolean includeAuthnStatement,
        @CustomType.Parameter("loginTheme") String loginTheme,
        @CustomType.Parameter("logoutServicePostBindingUrl") String logoutServicePostBindingUrl,
        @CustomType.Parameter("logoutServiceRedirectBindingUrl") String logoutServiceRedirectBindingUrl,
        @CustomType.Parameter("masterSamlProcessingUrl") String masterSamlProcessingUrl,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nameIdFormat") String nameIdFormat,
        @CustomType.Parameter("realmId") String realmId,
        @CustomType.Parameter("rootUrl") String rootUrl,
        @CustomType.Parameter("samlSignatureKeyName") String samlSignatureKeyName,
        @CustomType.Parameter("signAssertions") Boolean signAssertions,
        @CustomType.Parameter("signDocuments") Boolean signDocuments,
        @CustomType.Parameter("signatureAlgorithm") String signatureAlgorithm,
        @CustomType.Parameter("signatureKeyName") String signatureKeyName,
        @CustomType.Parameter("signingCertificate") String signingCertificate,
        @CustomType.Parameter("signingCertificateSha1") String signingCertificateSha1,
        @CustomType.Parameter("signingPrivateKey") String signingPrivateKey,
        @CustomType.Parameter("signingPrivateKeySha1") String signingPrivateKeySha1,
        @CustomType.Parameter("validRedirectUris") List<String> validRedirectUris) {
        this.assertionConsumerPostUrl = assertionConsumerPostUrl;
        this.assertionConsumerRedirectUrl = assertionConsumerRedirectUrl;
        this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
        this.baseUrl = baseUrl;
        this.canonicalizationMethod = canonicalizationMethod;
        this.clientId = clientId;
        this.clientSignatureRequired = clientSignatureRequired;
        this.description = description;
        this.enabled = enabled;
        this.encryptAssertions = encryptAssertions;
        this.encryptionCertificate = encryptionCertificate;
        this.encryptionCertificateSha1 = encryptionCertificateSha1;
        this.extraConfig = extraConfig;
        this.forceNameIdFormat = forceNameIdFormat;
        this.forcePostBinding = forcePostBinding;
        this.frontChannelLogout = frontChannelLogout;
        this.fullScopeAllowed = fullScopeAllowed;
        this.id = id;
        this.idpInitiatedSsoRelayState = idpInitiatedSsoRelayState;
        this.idpInitiatedSsoUrlName = idpInitiatedSsoUrlName;
        this.includeAuthnStatement = includeAuthnStatement;
        this.loginTheme = loginTheme;
        this.logoutServicePostBindingUrl = logoutServicePostBindingUrl;
        this.logoutServiceRedirectBindingUrl = logoutServiceRedirectBindingUrl;
        this.masterSamlProcessingUrl = masterSamlProcessingUrl;
        this.name = name;
        this.nameIdFormat = nameIdFormat;
        this.realmId = realmId;
        this.rootUrl = rootUrl;
        this.samlSignatureKeyName = samlSignatureKeyName;
        this.signAssertions = signAssertions;
        this.signDocuments = signDocuments;
        this.signatureAlgorithm = signatureAlgorithm;
        this.signatureKeyName = signatureKeyName;
        this.signingCertificate = signingCertificate;
        this.signingCertificateSha1 = signingCertificateSha1;
        this.signingPrivateKey = signingPrivateKey;
        this.signingPrivateKeySha1 = signingPrivateKeySha1;
        this.validRedirectUris = validRedirectUris;
    }

    public String assertionConsumerPostUrl() {
        return this.assertionConsumerPostUrl;
    }
    public String assertionConsumerRedirectUrl() {
        return this.assertionConsumerRedirectUrl;
    }
    public List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public String canonicalizationMethod() {
        return this.canonicalizationMethod;
    }
    public String clientId() {
        return this.clientId;
    }
    public Boolean clientSignatureRequired() {
        return this.clientSignatureRequired;
    }
    public String description() {
        return this.description;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean encryptAssertions() {
        return this.encryptAssertions;
    }
    public String encryptionCertificate() {
        return this.encryptionCertificate;
    }
    public String encryptionCertificateSha1() {
        return this.encryptionCertificateSha1;
    }
    public Map<String,Object> extraConfig() {
        return this.extraConfig;
    }
    public Boolean forceNameIdFormat() {
        return this.forceNameIdFormat;
    }
    public Boolean forcePostBinding() {
        return this.forcePostBinding;
    }
    public Boolean frontChannelLogout() {
        return this.frontChannelLogout;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String idpInitiatedSsoRelayState() {
        return this.idpInitiatedSsoRelayState;
    }
    public String idpInitiatedSsoUrlName() {
        return this.idpInitiatedSsoUrlName;
    }
    public Boolean includeAuthnStatement() {
        return this.includeAuthnStatement;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public String logoutServicePostBindingUrl() {
        return this.logoutServicePostBindingUrl;
    }
    public String logoutServiceRedirectBindingUrl() {
        return this.logoutServiceRedirectBindingUrl;
    }
    public String masterSamlProcessingUrl() {
        return this.masterSamlProcessingUrl;
    }
    public String name() {
        return this.name;
    }
    public String nameIdFormat() {
        return this.nameIdFormat;
    }
    public String realmId() {
        return this.realmId;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String samlSignatureKeyName() {
        return this.samlSignatureKeyName;
    }
    public Boolean signAssertions() {
        return this.signAssertions;
    }
    public Boolean signDocuments() {
        return this.signDocuments;
    }
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    public String signatureKeyName() {
        return this.signatureKeyName;
    }
    public String signingCertificate() {
        return this.signingCertificate;
    }
    public String signingCertificateSha1() {
        return this.signingCertificateSha1;
    }
    public String signingPrivateKey() {
        return this.signingPrivateKey;
    }
    public String signingPrivateKeySha1() {
        return this.signingPrivateKeySha1;
    }
    public List<String> validRedirectUris() {
        return this.validRedirectUris;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String assertionConsumerPostUrl;
        private String assertionConsumerRedirectUrl;
        private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
        private String baseUrl;
        private String canonicalizationMethod;
        private String clientId;
        private Boolean clientSignatureRequired;
        private String description;
        private Boolean enabled;
        private Boolean encryptAssertions;
        private String encryptionCertificate;
        private String encryptionCertificateSha1;
        private Map<String,Object> extraConfig;
        private Boolean forceNameIdFormat;
        private Boolean forcePostBinding;
        private Boolean frontChannelLogout;
        private Boolean fullScopeAllowed;
        private String id;
        private String idpInitiatedSsoRelayState;
        private String idpInitiatedSsoUrlName;
        private Boolean includeAuthnStatement;
        private String loginTheme;
        private String logoutServicePostBindingUrl;
        private String logoutServiceRedirectBindingUrl;
        private String masterSamlProcessingUrl;
        private String name;
        private String nameIdFormat;
        private String realmId;
        private String rootUrl;
        private String samlSignatureKeyName;
        private Boolean signAssertions;
        private Boolean signDocuments;
        private String signatureAlgorithm;
        private String signatureKeyName;
        private String signingCertificate;
        private String signingCertificateSha1;
        private String signingPrivateKey;
        private String signingPrivateKeySha1;
        private List<String> validRedirectUris;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertionConsumerPostUrl = defaults.assertionConsumerPostUrl;
    	      this.assertionConsumerRedirectUrl = defaults.assertionConsumerRedirectUrl;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.baseUrl = defaults.baseUrl;
    	      this.canonicalizationMethod = defaults.canonicalizationMethod;
    	      this.clientId = defaults.clientId;
    	      this.clientSignatureRequired = defaults.clientSignatureRequired;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.encryptAssertions = defaults.encryptAssertions;
    	      this.encryptionCertificate = defaults.encryptionCertificate;
    	      this.encryptionCertificateSha1 = defaults.encryptionCertificateSha1;
    	      this.extraConfig = defaults.extraConfig;
    	      this.forceNameIdFormat = defaults.forceNameIdFormat;
    	      this.forcePostBinding = defaults.forcePostBinding;
    	      this.frontChannelLogout = defaults.frontChannelLogout;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.idpInitiatedSsoRelayState = defaults.idpInitiatedSsoRelayState;
    	      this.idpInitiatedSsoUrlName = defaults.idpInitiatedSsoUrlName;
    	      this.includeAuthnStatement = defaults.includeAuthnStatement;
    	      this.loginTheme = defaults.loginTheme;
    	      this.logoutServicePostBindingUrl = defaults.logoutServicePostBindingUrl;
    	      this.logoutServiceRedirectBindingUrl = defaults.logoutServiceRedirectBindingUrl;
    	      this.masterSamlProcessingUrl = defaults.masterSamlProcessingUrl;
    	      this.name = defaults.name;
    	      this.nameIdFormat = defaults.nameIdFormat;
    	      this.realmId = defaults.realmId;
    	      this.rootUrl = defaults.rootUrl;
    	      this.samlSignatureKeyName = defaults.samlSignatureKeyName;
    	      this.signAssertions = defaults.signAssertions;
    	      this.signDocuments = defaults.signDocuments;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.signatureKeyName = defaults.signatureKeyName;
    	      this.signingCertificate = defaults.signingCertificate;
    	      this.signingCertificateSha1 = defaults.signingCertificateSha1;
    	      this.signingPrivateKey = defaults.signingPrivateKey;
    	      this.signingPrivateKeySha1 = defaults.signingPrivateKeySha1;
    	      this.validRedirectUris = defaults.validRedirectUris;
        }

        public Builder assertionConsumerPostUrl(String assertionConsumerPostUrl) {
            this.assertionConsumerPostUrl = Objects.requireNonNull(assertionConsumerPostUrl);
            return this;
        }
        public Builder assertionConsumerRedirectUrl(String assertionConsumerRedirectUrl) {
            this.assertionConsumerRedirectUrl = Objects.requireNonNull(assertionConsumerRedirectUrl);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides) {
            this.authenticationFlowBindingOverrides = Objects.requireNonNull(authenticationFlowBindingOverrides);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(GetClientAuthenticationFlowBindingOverride... authenticationFlowBindingOverrides) {
            return authenticationFlowBindingOverrides(List.of(authenticationFlowBindingOverrides));
        }
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }
        public Builder canonicalizationMethod(String canonicalizationMethod) {
            this.canonicalizationMethod = Objects.requireNonNull(canonicalizationMethod);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientSignatureRequired(Boolean clientSignatureRequired) {
            this.clientSignatureRequired = Objects.requireNonNull(clientSignatureRequired);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder encryptAssertions(Boolean encryptAssertions) {
            this.encryptAssertions = Objects.requireNonNull(encryptAssertions);
            return this;
        }
        public Builder encryptionCertificate(String encryptionCertificate) {
            this.encryptionCertificate = Objects.requireNonNull(encryptionCertificate);
            return this;
        }
        public Builder encryptionCertificateSha1(String encryptionCertificateSha1) {
            this.encryptionCertificateSha1 = Objects.requireNonNull(encryptionCertificateSha1);
            return this;
        }
        public Builder extraConfig(Map<String,Object> extraConfig) {
            this.extraConfig = Objects.requireNonNull(extraConfig);
            return this;
        }
        public Builder forceNameIdFormat(Boolean forceNameIdFormat) {
            this.forceNameIdFormat = Objects.requireNonNull(forceNameIdFormat);
            return this;
        }
        public Builder forcePostBinding(Boolean forcePostBinding) {
            this.forcePostBinding = Objects.requireNonNull(forcePostBinding);
            return this;
        }
        public Builder frontChannelLogout(Boolean frontChannelLogout) {
            this.frontChannelLogout = Objects.requireNonNull(frontChannelLogout);
            return this;
        }
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            this.fullScopeAllowed = Objects.requireNonNull(fullScopeAllowed);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder idpInitiatedSsoRelayState(String idpInitiatedSsoRelayState) {
            this.idpInitiatedSsoRelayState = Objects.requireNonNull(idpInitiatedSsoRelayState);
            return this;
        }
        public Builder idpInitiatedSsoUrlName(String idpInitiatedSsoUrlName) {
            this.idpInitiatedSsoUrlName = Objects.requireNonNull(idpInitiatedSsoUrlName);
            return this;
        }
        public Builder includeAuthnStatement(Boolean includeAuthnStatement) {
            this.includeAuthnStatement = Objects.requireNonNull(includeAuthnStatement);
            return this;
        }
        public Builder loginTheme(String loginTheme) {
            this.loginTheme = Objects.requireNonNull(loginTheme);
            return this;
        }
        public Builder logoutServicePostBindingUrl(String logoutServicePostBindingUrl) {
            this.logoutServicePostBindingUrl = Objects.requireNonNull(logoutServicePostBindingUrl);
            return this;
        }
        public Builder logoutServiceRedirectBindingUrl(String logoutServiceRedirectBindingUrl) {
            this.logoutServiceRedirectBindingUrl = Objects.requireNonNull(logoutServiceRedirectBindingUrl);
            return this;
        }
        public Builder masterSamlProcessingUrl(String masterSamlProcessingUrl) {
            this.masterSamlProcessingUrl = Objects.requireNonNull(masterSamlProcessingUrl);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nameIdFormat(String nameIdFormat) {
            this.nameIdFormat = Objects.requireNonNull(nameIdFormat);
            return this;
        }
        public Builder realmId(String realmId) {
            this.realmId = Objects.requireNonNull(realmId);
            return this;
        }
        public Builder rootUrl(String rootUrl) {
            this.rootUrl = Objects.requireNonNull(rootUrl);
            return this;
        }
        public Builder samlSignatureKeyName(String samlSignatureKeyName) {
            this.samlSignatureKeyName = Objects.requireNonNull(samlSignatureKeyName);
            return this;
        }
        public Builder signAssertions(Boolean signAssertions) {
            this.signAssertions = Objects.requireNonNull(signAssertions);
            return this;
        }
        public Builder signDocuments(Boolean signDocuments) {
            this.signDocuments = Objects.requireNonNull(signDocuments);
            return this;
        }
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            this.signatureAlgorithm = Objects.requireNonNull(signatureAlgorithm);
            return this;
        }
        public Builder signatureKeyName(String signatureKeyName) {
            this.signatureKeyName = Objects.requireNonNull(signatureKeyName);
            return this;
        }
        public Builder signingCertificate(String signingCertificate) {
            this.signingCertificate = Objects.requireNonNull(signingCertificate);
            return this;
        }
        public Builder signingCertificateSha1(String signingCertificateSha1) {
            this.signingCertificateSha1 = Objects.requireNonNull(signingCertificateSha1);
            return this;
        }
        public Builder signingPrivateKey(String signingPrivateKey) {
            this.signingPrivateKey = Objects.requireNonNull(signingPrivateKey);
            return this;
        }
        public Builder signingPrivateKeySha1(String signingPrivateKeySha1) {
            this.signingPrivateKeySha1 = Objects.requireNonNull(signingPrivateKeySha1);
            return this;
        }
        public Builder validRedirectUris(List<String> validRedirectUris) {
            this.validRedirectUris = Objects.requireNonNull(validRedirectUris);
            return this;
        }
        public Builder validRedirectUris(String... validRedirectUris) {
            return validRedirectUris(List.of(validRedirectUris));
        }        public GetClientResult build() {
            return new GetClientResult(assertionConsumerPostUrl, assertionConsumerRedirectUrl, authenticationFlowBindingOverrides, baseUrl, canonicalizationMethod, clientId, clientSignatureRequired, description, enabled, encryptAssertions, encryptionCertificate, encryptionCertificateSha1, extraConfig, forceNameIdFormat, forcePostBinding, frontChannelLogout, fullScopeAllowed, id, idpInitiatedSsoRelayState, idpInitiatedSsoUrlName, includeAuthnStatement, loginTheme, logoutServicePostBindingUrl, logoutServiceRedirectBindingUrl, masterSamlProcessingUrl, name, nameIdFormat, realmId, rootUrl, samlSignatureKeyName, signAssertions, signDocuments, signatureAlgorithm, signatureKeyName, signingCertificate, signingCertificateSha1, signingPrivateKey, signingPrivateKeySha1, validRedirectUris);
        }
    }
}
