// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetRealmWebAuthnPasswordlessPolicy extends com.pulumi.resources.InvokeArgs {

    public static final GetRealmWebAuthnPasswordlessPolicy Empty = new GetRealmWebAuthnPasswordlessPolicy();

    @Import(name="acceptableAaguids", required=true)
    private List<String> acceptableAaguids;

    public List<String> acceptableAaguids() {
        return this.acceptableAaguids;
    }

    @Import(name="attestationConveyancePreference", required=true)
    private String attestationConveyancePreference;

    public String attestationConveyancePreference() {
        return this.attestationConveyancePreference;
    }

    @Import(name="authenticatorAttachment", required=true)
    private String authenticatorAttachment;

    public String authenticatorAttachment() {
        return this.authenticatorAttachment;
    }

    @Import(name="avoidSameAuthenticatorRegister", required=true)
    private Boolean avoidSameAuthenticatorRegister;

    public Boolean avoidSameAuthenticatorRegister() {
        return this.avoidSameAuthenticatorRegister;
    }

    @Import(name="createTimeout", required=true)
    private Integer createTimeout;

    public Integer createTimeout() {
        return this.createTimeout;
    }

    @Import(name="relyingPartyEntityName", required=true)
    private String relyingPartyEntityName;

    public String relyingPartyEntityName() {
        return this.relyingPartyEntityName;
    }

    @Import(name="relyingPartyId", required=true)
    private String relyingPartyId;

    public String relyingPartyId() {
        return this.relyingPartyId;
    }

    @Import(name="requireResidentKey", required=true)
    private String requireResidentKey;

    public String requireResidentKey() {
        return this.requireResidentKey;
    }

    @Import(name="signatureAlgorithms", required=true)
    private List<String> signatureAlgorithms;

    public List<String> signatureAlgorithms() {
        return this.signatureAlgorithms;
    }

    @Import(name="userVerificationRequirement", required=true)
    private String userVerificationRequirement;

    public String userVerificationRequirement() {
        return this.userVerificationRequirement;
    }

    private GetRealmWebAuthnPasswordlessPolicy() {}

    private GetRealmWebAuthnPasswordlessPolicy(GetRealmWebAuthnPasswordlessPolicy $) {
        this.acceptableAaguids = $.acceptableAaguids;
        this.attestationConveyancePreference = $.attestationConveyancePreference;
        this.authenticatorAttachment = $.authenticatorAttachment;
        this.avoidSameAuthenticatorRegister = $.avoidSameAuthenticatorRegister;
        this.createTimeout = $.createTimeout;
        this.relyingPartyEntityName = $.relyingPartyEntityName;
        this.relyingPartyId = $.relyingPartyId;
        this.requireResidentKey = $.requireResidentKey;
        this.signatureAlgorithms = $.signatureAlgorithms;
        this.userVerificationRequirement = $.userVerificationRequirement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRealmWebAuthnPasswordlessPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRealmWebAuthnPasswordlessPolicy $;

        public Builder() {
            $ = new GetRealmWebAuthnPasswordlessPolicy();
        }

        public Builder(GetRealmWebAuthnPasswordlessPolicy defaults) {
            $ = new GetRealmWebAuthnPasswordlessPolicy(Objects.requireNonNull(defaults));
        }

        public Builder acceptableAaguids(List<String> acceptableAaguids) {
            $.acceptableAaguids = acceptableAaguids;
            return this;
        }

        public Builder acceptableAaguids(String... acceptableAaguids) {
            return acceptableAaguids(List.of(acceptableAaguids));
        }

        public Builder attestationConveyancePreference(String attestationConveyancePreference) {
            $.attestationConveyancePreference = attestationConveyancePreference;
            return this;
        }

        public Builder authenticatorAttachment(String authenticatorAttachment) {
            $.authenticatorAttachment = authenticatorAttachment;
            return this;
        }

        public Builder avoidSameAuthenticatorRegister(Boolean avoidSameAuthenticatorRegister) {
            $.avoidSameAuthenticatorRegister = avoidSameAuthenticatorRegister;
            return this;
        }

        public Builder createTimeout(Integer createTimeout) {
            $.createTimeout = createTimeout;
            return this;
        }

        public Builder relyingPartyEntityName(String relyingPartyEntityName) {
            $.relyingPartyEntityName = relyingPartyEntityName;
            return this;
        }

        public Builder relyingPartyId(String relyingPartyId) {
            $.relyingPartyId = relyingPartyId;
            return this;
        }

        public Builder requireResidentKey(String requireResidentKey) {
            $.requireResidentKey = requireResidentKey;
            return this;
        }

        public Builder signatureAlgorithms(List<String> signatureAlgorithms) {
            $.signatureAlgorithms = signatureAlgorithms;
            return this;
        }

        public Builder signatureAlgorithms(String... signatureAlgorithms) {
            return signatureAlgorithms(List.of(signatureAlgorithms));
        }

        public Builder userVerificationRequirement(String userVerificationRequirement) {
            $.userVerificationRequirement = userVerificationRequirement;
            return this;
        }

        public GetRealmWebAuthnPasswordlessPolicy build() {
            $.acceptableAaguids = Objects.requireNonNull($.acceptableAaguids, "expected parameter 'acceptableAaguids' to be non-null");
            $.attestationConveyancePreference = Objects.requireNonNull($.attestationConveyancePreference, "expected parameter 'attestationConveyancePreference' to be non-null");
            $.authenticatorAttachment = Objects.requireNonNull($.authenticatorAttachment, "expected parameter 'authenticatorAttachment' to be non-null");
            $.avoidSameAuthenticatorRegister = Objects.requireNonNull($.avoidSameAuthenticatorRegister, "expected parameter 'avoidSameAuthenticatorRegister' to be non-null");
            $.createTimeout = Objects.requireNonNull($.createTimeout, "expected parameter 'createTimeout' to be non-null");
            $.relyingPartyEntityName = Objects.requireNonNull($.relyingPartyEntityName, "expected parameter 'relyingPartyEntityName' to be non-null");
            $.relyingPartyId = Objects.requireNonNull($.relyingPartyId, "expected parameter 'relyingPartyId' to be non-null");
            $.requireResidentKey = Objects.requireNonNull($.requireResidentKey, "expected parameter 'requireResidentKey' to be non-null");
            $.signatureAlgorithms = Objects.requireNonNull($.signatureAlgorithms, "expected parameter 'signatureAlgorithms' to be non-null");
            $.userVerificationRequirement = Objects.requireNonNull($.userVerificationRequirement, "expected parameter 'userVerificationRequirement' to be non-null");
            return $;
        }
    }

}
