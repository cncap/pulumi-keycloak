// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RealmSecurityDefensesHeaders {
    /**
     * @return Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
     * 
     */
    private final @Nullable String contentSecurityPolicy;
    /**
     * @return Used for testing Content Security Policies.
     * 
     */
    private final @Nullable String contentSecurityPolicyReportOnly;
    /**
     * @return The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
     * 
     */
    private final @Nullable String strictTransportSecurity;
    /**
     * @return Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
     * 
     */
    private final @Nullable String xContentTypeOptions;
    /**
     * @return Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
     * 
     */
    private final @Nullable String xFrameOptions;
    /**
     * @return Prevent pages from appearing in search engines.
     * 
     */
    private final @Nullable String xRobotsTag;
    /**
     * @return This header configures the Cross-site scripting (XSS) filter in your browser.
     * 
     */
    private final @Nullable String xXssProtection;

    @CustomType.Constructor
    private RealmSecurityDefensesHeaders(
        @CustomType.Parameter("contentSecurityPolicy") @Nullable String contentSecurityPolicy,
        @CustomType.Parameter("contentSecurityPolicyReportOnly") @Nullable String contentSecurityPolicyReportOnly,
        @CustomType.Parameter("strictTransportSecurity") @Nullable String strictTransportSecurity,
        @CustomType.Parameter("xContentTypeOptions") @Nullable String xContentTypeOptions,
        @CustomType.Parameter("xFrameOptions") @Nullable String xFrameOptions,
        @CustomType.Parameter("xRobotsTag") @Nullable String xRobotsTag,
        @CustomType.Parameter("xXssProtection") @Nullable String xXssProtection) {
        this.contentSecurityPolicy = contentSecurityPolicy;
        this.contentSecurityPolicyReportOnly = contentSecurityPolicyReportOnly;
        this.strictTransportSecurity = strictTransportSecurity;
        this.xContentTypeOptions = xContentTypeOptions;
        this.xFrameOptions = xFrameOptions;
        this.xRobotsTag = xRobotsTag;
        this.xXssProtection = xXssProtection;
    }

    /**
     * @return Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the [W3C-CSP](https://www.w3.org/TR/CSP/) Abstract.
     * 
     */
    public Optional<String> contentSecurityPolicy() {
        return Optional.ofNullable(this.contentSecurityPolicy);
    }
    /**
     * @return Used for testing Content Security Policies.
     * 
     */
    public Optional<String> contentSecurityPolicyReportOnly() {
        return Optional.ofNullable(this.contentSecurityPolicyReportOnly);
    }
    /**
     * @return The Script-Transport-Security HTTP header tells browsers to always use HTTPS.
     * 
     */
    public Optional<String> strictTransportSecurity() {
        return Optional.ofNullable(this.strictTransportSecurity);
    }
    /**
     * @return Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type
     * 
     */
    public Optional<String> xContentTypeOptions() {
        return Optional.ofNullable(this.xContentTypeOptions);
    }
    /**
     * @return Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the [RFC7034](https://tools.ietf.org/html/rfc7034)
     * 
     */
    public Optional<String> xFrameOptions() {
        return Optional.ofNullable(this.xFrameOptions);
    }
    /**
     * @return Prevent pages from appearing in search engines.
     * 
     */
    public Optional<String> xRobotsTag() {
        return Optional.ofNullable(this.xRobotsTag);
    }
    /**
     * @return This header configures the Cross-site scripting (XSS) filter in your browser.
     * 
     */
    public Optional<String> xXssProtection() {
        return Optional.ofNullable(this.xXssProtection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RealmSecurityDefensesHeaders defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String contentSecurityPolicy;
        private @Nullable String contentSecurityPolicyReportOnly;
        private @Nullable String strictTransportSecurity;
        private @Nullable String xContentTypeOptions;
        private @Nullable String xFrameOptions;
        private @Nullable String xRobotsTag;
        private @Nullable String xXssProtection;

        public Builder() {
    	      // Empty
        }

        public Builder(RealmSecurityDefensesHeaders defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentSecurityPolicy = defaults.contentSecurityPolicy;
    	      this.contentSecurityPolicyReportOnly = defaults.contentSecurityPolicyReportOnly;
    	      this.strictTransportSecurity = defaults.strictTransportSecurity;
    	      this.xContentTypeOptions = defaults.xContentTypeOptions;
    	      this.xFrameOptions = defaults.xFrameOptions;
    	      this.xRobotsTag = defaults.xRobotsTag;
    	      this.xXssProtection = defaults.xXssProtection;
        }

        public Builder contentSecurityPolicy(@Nullable String contentSecurityPolicy) {
            this.contentSecurityPolicy = contentSecurityPolicy;
            return this;
        }
        public Builder contentSecurityPolicyReportOnly(@Nullable String contentSecurityPolicyReportOnly) {
            this.contentSecurityPolicyReportOnly = contentSecurityPolicyReportOnly;
            return this;
        }
        public Builder strictTransportSecurity(@Nullable String strictTransportSecurity) {
            this.strictTransportSecurity = strictTransportSecurity;
            return this;
        }
        public Builder xContentTypeOptions(@Nullable String xContentTypeOptions) {
            this.xContentTypeOptions = xContentTypeOptions;
            return this;
        }
        public Builder xFrameOptions(@Nullable String xFrameOptions) {
            this.xFrameOptions = xFrameOptions;
            return this;
        }
        public Builder xRobotsTag(@Nullable String xRobotsTag) {
            this.xRobotsTag = xRobotsTag;
            return this;
        }
        public Builder xXssProtection(@Nullable String xXssProtection) {
            this.xXssProtection = xXssProtection;
            return this;
        }        public RealmSecurityDefensesHeaders build() {
            return new RealmSecurityDefensesHeaders(contentSecurityPolicy, contentSecurityPolicyReportOnly, strictTransportSecurity, xContentTypeOptions, xFrameOptions, xRobotsTag, xXssProtection);
        }
    }
}
