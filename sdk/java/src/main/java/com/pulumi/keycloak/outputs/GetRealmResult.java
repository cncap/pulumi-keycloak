// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.keycloak.outputs.GetRealmInternationalization;
import com.pulumi.keycloak.outputs.GetRealmOtpPolicy;
import com.pulumi.keycloak.outputs.GetRealmSecurityDefense;
import com.pulumi.keycloak.outputs.GetRealmSmtpServer;
import com.pulumi.keycloak.outputs.GetRealmWebAuthnPasswordlessPolicy;
import com.pulumi.keycloak.outputs.GetRealmWebAuthnPolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRealmResult {
    private final String accessCodeLifespan;
    private final String accessCodeLifespanLogin;
    private final String accessCodeLifespanUserAction;
    private final String accessTokenLifespan;
    private final String accessTokenLifespanForImplicitFlow;
    private final String accountTheme;
    private final String actionTokenGeneratedByAdminLifespan;
    private final String actionTokenGeneratedByUserLifespan;
    private final String adminTheme;
    private final Map<String,Object> attributes;
    private final String browserFlow;
    private final String clientAuthenticationFlow;
    private final String clientSessionIdleTimeout;
    private final String clientSessionMaxLifespan;
    private final List<String> defaultDefaultClientScopes;
    private final List<String> defaultOptionalClientScopes;
    private final String defaultSignatureAlgorithm;
    private final String directGrantFlow;
    private final String displayName;
    private final @Nullable String displayNameHtml;
    private final String dockerAuthenticationFlow;
    private final Boolean duplicateEmailsAllowed;
    private final Boolean editUsernameAllowed;
    private final String emailTheme;
    private final Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String internalId;
    private final List<GetRealmInternationalization> internationalizations;
    private final String loginTheme;
    private final Boolean loginWithEmailAllowed;
    private final String oauth2DeviceCodeLifespan;
    private final Integer oauth2DevicePollingInterval;
    private final String offlineSessionIdleTimeout;
    private final String offlineSessionMaxLifespan;
    private final Boolean offlineSessionMaxLifespanEnabled;
    private final GetRealmOtpPolicy otpPolicy;
    private final String passwordPolicy;
    private final String realm;
    private final Integer refreshTokenMaxReuse;
    private final Boolean registrationAllowed;
    private final Boolean registrationEmailAsUsername;
    private final String registrationFlow;
    private final Boolean rememberMe;
    private final String resetCredentialsFlow;
    private final Boolean resetPasswordAllowed;
    private final Boolean revokeRefreshToken;
    private final List<GetRealmSecurityDefense> securityDefenses;
    private final List<GetRealmSmtpServer> smtpServers;
    private final String sslRequired;
    private final String ssoSessionIdleTimeout;
    private final String ssoSessionIdleTimeoutRememberMe;
    private final String ssoSessionMaxLifespan;
    private final String ssoSessionMaxLifespanRememberMe;
    private final Boolean userManagedAccess;
    private final Boolean verifyEmail;
    private final GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy;
    private final GetRealmWebAuthnPolicy webAuthnPolicy;

    @CustomType.Constructor
    private GetRealmResult(
        @CustomType.Parameter("accessCodeLifespan") String accessCodeLifespan,
        @CustomType.Parameter("accessCodeLifespanLogin") String accessCodeLifespanLogin,
        @CustomType.Parameter("accessCodeLifespanUserAction") String accessCodeLifespanUserAction,
        @CustomType.Parameter("accessTokenLifespan") String accessTokenLifespan,
        @CustomType.Parameter("accessTokenLifespanForImplicitFlow") String accessTokenLifespanForImplicitFlow,
        @CustomType.Parameter("accountTheme") String accountTheme,
        @CustomType.Parameter("actionTokenGeneratedByAdminLifespan") String actionTokenGeneratedByAdminLifespan,
        @CustomType.Parameter("actionTokenGeneratedByUserLifespan") String actionTokenGeneratedByUserLifespan,
        @CustomType.Parameter("adminTheme") String adminTheme,
        @CustomType.Parameter("attributes") Map<String,Object> attributes,
        @CustomType.Parameter("browserFlow") String browserFlow,
        @CustomType.Parameter("clientAuthenticationFlow") String clientAuthenticationFlow,
        @CustomType.Parameter("clientSessionIdleTimeout") String clientSessionIdleTimeout,
        @CustomType.Parameter("clientSessionMaxLifespan") String clientSessionMaxLifespan,
        @CustomType.Parameter("defaultDefaultClientScopes") List<String> defaultDefaultClientScopes,
        @CustomType.Parameter("defaultOptionalClientScopes") List<String> defaultOptionalClientScopes,
        @CustomType.Parameter("defaultSignatureAlgorithm") String defaultSignatureAlgorithm,
        @CustomType.Parameter("directGrantFlow") String directGrantFlow,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("displayNameHtml") @Nullable String displayNameHtml,
        @CustomType.Parameter("dockerAuthenticationFlow") String dockerAuthenticationFlow,
        @CustomType.Parameter("duplicateEmailsAllowed") Boolean duplicateEmailsAllowed,
        @CustomType.Parameter("editUsernameAllowed") Boolean editUsernameAllowed,
        @CustomType.Parameter("emailTheme") String emailTheme,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("internalId") String internalId,
        @CustomType.Parameter("internationalizations") List<GetRealmInternationalization> internationalizations,
        @CustomType.Parameter("loginTheme") String loginTheme,
        @CustomType.Parameter("loginWithEmailAllowed") Boolean loginWithEmailAllowed,
        @CustomType.Parameter("oauth2DeviceCodeLifespan") String oauth2DeviceCodeLifespan,
        @CustomType.Parameter("oauth2DevicePollingInterval") Integer oauth2DevicePollingInterval,
        @CustomType.Parameter("offlineSessionIdleTimeout") String offlineSessionIdleTimeout,
        @CustomType.Parameter("offlineSessionMaxLifespan") String offlineSessionMaxLifespan,
        @CustomType.Parameter("offlineSessionMaxLifespanEnabled") Boolean offlineSessionMaxLifespanEnabled,
        @CustomType.Parameter("otpPolicy") GetRealmOtpPolicy otpPolicy,
        @CustomType.Parameter("passwordPolicy") String passwordPolicy,
        @CustomType.Parameter("realm") String realm,
        @CustomType.Parameter("refreshTokenMaxReuse") Integer refreshTokenMaxReuse,
        @CustomType.Parameter("registrationAllowed") Boolean registrationAllowed,
        @CustomType.Parameter("registrationEmailAsUsername") Boolean registrationEmailAsUsername,
        @CustomType.Parameter("registrationFlow") String registrationFlow,
        @CustomType.Parameter("rememberMe") Boolean rememberMe,
        @CustomType.Parameter("resetCredentialsFlow") String resetCredentialsFlow,
        @CustomType.Parameter("resetPasswordAllowed") Boolean resetPasswordAllowed,
        @CustomType.Parameter("revokeRefreshToken") Boolean revokeRefreshToken,
        @CustomType.Parameter("securityDefenses") List<GetRealmSecurityDefense> securityDefenses,
        @CustomType.Parameter("smtpServers") List<GetRealmSmtpServer> smtpServers,
        @CustomType.Parameter("sslRequired") String sslRequired,
        @CustomType.Parameter("ssoSessionIdleTimeout") String ssoSessionIdleTimeout,
        @CustomType.Parameter("ssoSessionIdleTimeoutRememberMe") String ssoSessionIdleTimeoutRememberMe,
        @CustomType.Parameter("ssoSessionMaxLifespan") String ssoSessionMaxLifespan,
        @CustomType.Parameter("ssoSessionMaxLifespanRememberMe") String ssoSessionMaxLifespanRememberMe,
        @CustomType.Parameter("userManagedAccess") Boolean userManagedAccess,
        @CustomType.Parameter("verifyEmail") Boolean verifyEmail,
        @CustomType.Parameter("webAuthnPasswordlessPolicy") GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy,
        @CustomType.Parameter("webAuthnPolicy") GetRealmWebAuthnPolicy webAuthnPolicy) {
        this.accessCodeLifespan = accessCodeLifespan;
        this.accessCodeLifespanLogin = accessCodeLifespanLogin;
        this.accessCodeLifespanUserAction = accessCodeLifespanUserAction;
        this.accessTokenLifespan = accessTokenLifespan;
        this.accessTokenLifespanForImplicitFlow = accessTokenLifespanForImplicitFlow;
        this.accountTheme = accountTheme;
        this.actionTokenGeneratedByAdminLifespan = actionTokenGeneratedByAdminLifespan;
        this.actionTokenGeneratedByUserLifespan = actionTokenGeneratedByUserLifespan;
        this.adminTheme = adminTheme;
        this.attributes = attributes;
        this.browserFlow = browserFlow;
        this.clientAuthenticationFlow = clientAuthenticationFlow;
        this.clientSessionIdleTimeout = clientSessionIdleTimeout;
        this.clientSessionMaxLifespan = clientSessionMaxLifespan;
        this.defaultDefaultClientScopes = defaultDefaultClientScopes;
        this.defaultOptionalClientScopes = defaultOptionalClientScopes;
        this.defaultSignatureAlgorithm = defaultSignatureAlgorithm;
        this.directGrantFlow = directGrantFlow;
        this.displayName = displayName;
        this.displayNameHtml = displayNameHtml;
        this.dockerAuthenticationFlow = dockerAuthenticationFlow;
        this.duplicateEmailsAllowed = duplicateEmailsAllowed;
        this.editUsernameAllowed = editUsernameAllowed;
        this.emailTheme = emailTheme;
        this.enabled = enabled;
        this.id = id;
        this.internalId = internalId;
        this.internationalizations = internationalizations;
        this.loginTheme = loginTheme;
        this.loginWithEmailAllowed = loginWithEmailAllowed;
        this.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
        this.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
        this.offlineSessionIdleTimeout = offlineSessionIdleTimeout;
        this.offlineSessionMaxLifespan = offlineSessionMaxLifespan;
        this.offlineSessionMaxLifespanEnabled = offlineSessionMaxLifespanEnabled;
        this.otpPolicy = otpPolicy;
        this.passwordPolicy = passwordPolicy;
        this.realm = realm;
        this.refreshTokenMaxReuse = refreshTokenMaxReuse;
        this.registrationAllowed = registrationAllowed;
        this.registrationEmailAsUsername = registrationEmailAsUsername;
        this.registrationFlow = registrationFlow;
        this.rememberMe = rememberMe;
        this.resetCredentialsFlow = resetCredentialsFlow;
        this.resetPasswordAllowed = resetPasswordAllowed;
        this.revokeRefreshToken = revokeRefreshToken;
        this.securityDefenses = securityDefenses;
        this.smtpServers = smtpServers;
        this.sslRequired = sslRequired;
        this.ssoSessionIdleTimeout = ssoSessionIdleTimeout;
        this.ssoSessionIdleTimeoutRememberMe = ssoSessionIdleTimeoutRememberMe;
        this.ssoSessionMaxLifespan = ssoSessionMaxLifespan;
        this.ssoSessionMaxLifespanRememberMe = ssoSessionMaxLifespanRememberMe;
        this.userManagedAccess = userManagedAccess;
        this.verifyEmail = verifyEmail;
        this.webAuthnPasswordlessPolicy = webAuthnPasswordlessPolicy;
        this.webAuthnPolicy = webAuthnPolicy;
    }

    public String accessCodeLifespan() {
        return this.accessCodeLifespan;
    }
    public String accessCodeLifespanLogin() {
        return this.accessCodeLifespanLogin;
    }
    public String accessCodeLifespanUserAction() {
        return this.accessCodeLifespanUserAction;
    }
    public String accessTokenLifespan() {
        return this.accessTokenLifespan;
    }
    public String accessTokenLifespanForImplicitFlow() {
        return this.accessTokenLifespanForImplicitFlow;
    }
    public String accountTheme() {
        return this.accountTheme;
    }
    public String actionTokenGeneratedByAdminLifespan() {
        return this.actionTokenGeneratedByAdminLifespan;
    }
    public String actionTokenGeneratedByUserLifespan() {
        return this.actionTokenGeneratedByUserLifespan;
    }
    public String adminTheme() {
        return this.adminTheme;
    }
    public Map<String,Object> attributes() {
        return this.attributes;
    }
    public String browserFlow() {
        return this.browserFlow;
    }
    public String clientAuthenticationFlow() {
        return this.clientAuthenticationFlow;
    }
    public String clientSessionIdleTimeout() {
        return this.clientSessionIdleTimeout;
    }
    public String clientSessionMaxLifespan() {
        return this.clientSessionMaxLifespan;
    }
    public List<String> defaultDefaultClientScopes() {
        return this.defaultDefaultClientScopes;
    }
    public List<String> defaultOptionalClientScopes() {
        return this.defaultOptionalClientScopes;
    }
    public String defaultSignatureAlgorithm() {
        return this.defaultSignatureAlgorithm;
    }
    public String directGrantFlow() {
        return this.directGrantFlow;
    }
    public String displayName() {
        return this.displayName;
    }
    public Optional<String> displayNameHtml() {
        return Optional.ofNullable(this.displayNameHtml);
    }
    public String dockerAuthenticationFlow() {
        return this.dockerAuthenticationFlow;
    }
    public Boolean duplicateEmailsAllowed() {
        return this.duplicateEmailsAllowed;
    }
    public Boolean editUsernameAllowed() {
        return this.editUsernameAllowed;
    }
    public String emailTheme() {
        return this.emailTheme;
    }
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String internalId() {
        return this.internalId;
    }
    public List<GetRealmInternationalization> internationalizations() {
        return this.internationalizations;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public Boolean loginWithEmailAllowed() {
        return this.loginWithEmailAllowed;
    }
    public String oauth2DeviceCodeLifespan() {
        return this.oauth2DeviceCodeLifespan;
    }
    public Integer oauth2DevicePollingInterval() {
        return this.oauth2DevicePollingInterval;
    }
    public String offlineSessionIdleTimeout() {
        return this.offlineSessionIdleTimeout;
    }
    public String offlineSessionMaxLifespan() {
        return this.offlineSessionMaxLifespan;
    }
    public Boolean offlineSessionMaxLifespanEnabled() {
        return this.offlineSessionMaxLifespanEnabled;
    }
    public GetRealmOtpPolicy otpPolicy() {
        return this.otpPolicy;
    }
    public String passwordPolicy() {
        return this.passwordPolicy;
    }
    public String realm() {
        return this.realm;
    }
    public Integer refreshTokenMaxReuse() {
        return this.refreshTokenMaxReuse;
    }
    public Boolean registrationAllowed() {
        return this.registrationAllowed;
    }
    public Boolean registrationEmailAsUsername() {
        return this.registrationEmailAsUsername;
    }
    public String registrationFlow() {
        return this.registrationFlow;
    }
    public Boolean rememberMe() {
        return this.rememberMe;
    }
    public String resetCredentialsFlow() {
        return this.resetCredentialsFlow;
    }
    public Boolean resetPasswordAllowed() {
        return this.resetPasswordAllowed;
    }
    public Boolean revokeRefreshToken() {
        return this.revokeRefreshToken;
    }
    public List<GetRealmSecurityDefense> securityDefenses() {
        return this.securityDefenses;
    }
    public List<GetRealmSmtpServer> smtpServers() {
        return this.smtpServers;
    }
    public String sslRequired() {
        return this.sslRequired;
    }
    public String ssoSessionIdleTimeout() {
        return this.ssoSessionIdleTimeout;
    }
    public String ssoSessionIdleTimeoutRememberMe() {
        return this.ssoSessionIdleTimeoutRememberMe;
    }
    public String ssoSessionMaxLifespan() {
        return this.ssoSessionMaxLifespan;
    }
    public String ssoSessionMaxLifespanRememberMe() {
        return this.ssoSessionMaxLifespanRememberMe;
    }
    public Boolean userManagedAccess() {
        return this.userManagedAccess;
    }
    public Boolean verifyEmail() {
        return this.verifyEmail;
    }
    public GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy() {
        return this.webAuthnPasswordlessPolicy;
    }
    public GetRealmWebAuthnPolicy webAuthnPolicy() {
        return this.webAuthnPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRealmResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessCodeLifespan;
        private String accessCodeLifespanLogin;
        private String accessCodeLifespanUserAction;
        private String accessTokenLifespan;
        private String accessTokenLifespanForImplicitFlow;
        private String accountTheme;
        private String actionTokenGeneratedByAdminLifespan;
        private String actionTokenGeneratedByUserLifespan;
        private String adminTheme;
        private Map<String,Object> attributes;
        private String browserFlow;
        private String clientAuthenticationFlow;
        private String clientSessionIdleTimeout;
        private String clientSessionMaxLifespan;
        private List<String> defaultDefaultClientScopes;
        private List<String> defaultOptionalClientScopes;
        private String defaultSignatureAlgorithm;
        private String directGrantFlow;
        private String displayName;
        private @Nullable String displayNameHtml;
        private String dockerAuthenticationFlow;
        private Boolean duplicateEmailsAllowed;
        private Boolean editUsernameAllowed;
        private String emailTheme;
        private Boolean enabled;
        private String id;
        private String internalId;
        private List<GetRealmInternationalization> internationalizations;
        private String loginTheme;
        private Boolean loginWithEmailAllowed;
        private String oauth2DeviceCodeLifespan;
        private Integer oauth2DevicePollingInterval;
        private String offlineSessionIdleTimeout;
        private String offlineSessionMaxLifespan;
        private Boolean offlineSessionMaxLifespanEnabled;
        private GetRealmOtpPolicy otpPolicy;
        private String passwordPolicy;
        private String realm;
        private Integer refreshTokenMaxReuse;
        private Boolean registrationAllowed;
        private Boolean registrationEmailAsUsername;
        private String registrationFlow;
        private Boolean rememberMe;
        private String resetCredentialsFlow;
        private Boolean resetPasswordAllowed;
        private Boolean revokeRefreshToken;
        private List<GetRealmSecurityDefense> securityDefenses;
        private List<GetRealmSmtpServer> smtpServers;
        private String sslRequired;
        private String ssoSessionIdleTimeout;
        private String ssoSessionIdleTimeoutRememberMe;
        private String ssoSessionMaxLifespan;
        private String ssoSessionMaxLifespanRememberMe;
        private Boolean userManagedAccess;
        private Boolean verifyEmail;
        private GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy;
        private GetRealmWebAuthnPolicy webAuthnPolicy;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRealmResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessCodeLifespan = defaults.accessCodeLifespan;
    	      this.accessCodeLifespanLogin = defaults.accessCodeLifespanLogin;
    	      this.accessCodeLifespanUserAction = defaults.accessCodeLifespanUserAction;
    	      this.accessTokenLifespan = defaults.accessTokenLifespan;
    	      this.accessTokenLifespanForImplicitFlow = defaults.accessTokenLifespanForImplicitFlow;
    	      this.accountTheme = defaults.accountTheme;
    	      this.actionTokenGeneratedByAdminLifespan = defaults.actionTokenGeneratedByAdminLifespan;
    	      this.actionTokenGeneratedByUserLifespan = defaults.actionTokenGeneratedByUserLifespan;
    	      this.adminTheme = defaults.adminTheme;
    	      this.attributes = defaults.attributes;
    	      this.browserFlow = defaults.browserFlow;
    	      this.clientAuthenticationFlow = defaults.clientAuthenticationFlow;
    	      this.clientSessionIdleTimeout = defaults.clientSessionIdleTimeout;
    	      this.clientSessionMaxLifespan = defaults.clientSessionMaxLifespan;
    	      this.defaultDefaultClientScopes = defaults.defaultDefaultClientScopes;
    	      this.defaultOptionalClientScopes = defaults.defaultOptionalClientScopes;
    	      this.defaultSignatureAlgorithm = defaults.defaultSignatureAlgorithm;
    	      this.directGrantFlow = defaults.directGrantFlow;
    	      this.displayName = defaults.displayName;
    	      this.displayNameHtml = defaults.displayNameHtml;
    	      this.dockerAuthenticationFlow = defaults.dockerAuthenticationFlow;
    	      this.duplicateEmailsAllowed = defaults.duplicateEmailsAllowed;
    	      this.editUsernameAllowed = defaults.editUsernameAllowed;
    	      this.emailTheme = defaults.emailTheme;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.internalId = defaults.internalId;
    	      this.internationalizations = defaults.internationalizations;
    	      this.loginTheme = defaults.loginTheme;
    	      this.loginWithEmailAllowed = defaults.loginWithEmailAllowed;
    	      this.oauth2DeviceCodeLifespan = defaults.oauth2DeviceCodeLifespan;
    	      this.oauth2DevicePollingInterval = defaults.oauth2DevicePollingInterval;
    	      this.offlineSessionIdleTimeout = defaults.offlineSessionIdleTimeout;
    	      this.offlineSessionMaxLifespan = defaults.offlineSessionMaxLifespan;
    	      this.offlineSessionMaxLifespanEnabled = defaults.offlineSessionMaxLifespanEnabled;
    	      this.otpPolicy = defaults.otpPolicy;
    	      this.passwordPolicy = defaults.passwordPolicy;
    	      this.realm = defaults.realm;
    	      this.refreshTokenMaxReuse = defaults.refreshTokenMaxReuse;
    	      this.registrationAllowed = defaults.registrationAllowed;
    	      this.registrationEmailAsUsername = defaults.registrationEmailAsUsername;
    	      this.registrationFlow = defaults.registrationFlow;
    	      this.rememberMe = defaults.rememberMe;
    	      this.resetCredentialsFlow = defaults.resetCredentialsFlow;
    	      this.resetPasswordAllowed = defaults.resetPasswordAllowed;
    	      this.revokeRefreshToken = defaults.revokeRefreshToken;
    	      this.securityDefenses = defaults.securityDefenses;
    	      this.smtpServers = defaults.smtpServers;
    	      this.sslRequired = defaults.sslRequired;
    	      this.ssoSessionIdleTimeout = defaults.ssoSessionIdleTimeout;
    	      this.ssoSessionIdleTimeoutRememberMe = defaults.ssoSessionIdleTimeoutRememberMe;
    	      this.ssoSessionMaxLifespan = defaults.ssoSessionMaxLifespan;
    	      this.ssoSessionMaxLifespanRememberMe = defaults.ssoSessionMaxLifespanRememberMe;
    	      this.userManagedAccess = defaults.userManagedAccess;
    	      this.verifyEmail = defaults.verifyEmail;
    	      this.webAuthnPasswordlessPolicy = defaults.webAuthnPasswordlessPolicy;
    	      this.webAuthnPolicy = defaults.webAuthnPolicy;
        }

        public Builder accessCodeLifespan(String accessCodeLifespan) {
            this.accessCodeLifespan = Objects.requireNonNull(accessCodeLifespan);
            return this;
        }
        public Builder accessCodeLifespanLogin(String accessCodeLifespanLogin) {
            this.accessCodeLifespanLogin = Objects.requireNonNull(accessCodeLifespanLogin);
            return this;
        }
        public Builder accessCodeLifespanUserAction(String accessCodeLifespanUserAction) {
            this.accessCodeLifespanUserAction = Objects.requireNonNull(accessCodeLifespanUserAction);
            return this;
        }
        public Builder accessTokenLifespan(String accessTokenLifespan) {
            this.accessTokenLifespan = Objects.requireNonNull(accessTokenLifespan);
            return this;
        }
        public Builder accessTokenLifespanForImplicitFlow(String accessTokenLifespanForImplicitFlow) {
            this.accessTokenLifespanForImplicitFlow = Objects.requireNonNull(accessTokenLifespanForImplicitFlow);
            return this;
        }
        public Builder accountTheme(String accountTheme) {
            this.accountTheme = Objects.requireNonNull(accountTheme);
            return this;
        }
        public Builder actionTokenGeneratedByAdminLifespan(String actionTokenGeneratedByAdminLifespan) {
            this.actionTokenGeneratedByAdminLifespan = Objects.requireNonNull(actionTokenGeneratedByAdminLifespan);
            return this;
        }
        public Builder actionTokenGeneratedByUserLifespan(String actionTokenGeneratedByUserLifespan) {
            this.actionTokenGeneratedByUserLifespan = Objects.requireNonNull(actionTokenGeneratedByUserLifespan);
            return this;
        }
        public Builder adminTheme(String adminTheme) {
            this.adminTheme = Objects.requireNonNull(adminTheme);
            return this;
        }
        public Builder attributes(Map<String,Object> attributes) {
            this.attributes = Objects.requireNonNull(attributes);
            return this;
        }
        public Builder browserFlow(String browserFlow) {
            this.browserFlow = Objects.requireNonNull(browserFlow);
            return this;
        }
        public Builder clientAuthenticationFlow(String clientAuthenticationFlow) {
            this.clientAuthenticationFlow = Objects.requireNonNull(clientAuthenticationFlow);
            return this;
        }
        public Builder clientSessionIdleTimeout(String clientSessionIdleTimeout) {
            this.clientSessionIdleTimeout = Objects.requireNonNull(clientSessionIdleTimeout);
            return this;
        }
        public Builder clientSessionMaxLifespan(String clientSessionMaxLifespan) {
            this.clientSessionMaxLifespan = Objects.requireNonNull(clientSessionMaxLifespan);
            return this;
        }
        public Builder defaultDefaultClientScopes(List<String> defaultDefaultClientScopes) {
            this.defaultDefaultClientScopes = Objects.requireNonNull(defaultDefaultClientScopes);
            return this;
        }
        public Builder defaultDefaultClientScopes(String... defaultDefaultClientScopes) {
            return defaultDefaultClientScopes(List.of(defaultDefaultClientScopes));
        }
        public Builder defaultOptionalClientScopes(List<String> defaultOptionalClientScopes) {
            this.defaultOptionalClientScopes = Objects.requireNonNull(defaultOptionalClientScopes);
            return this;
        }
        public Builder defaultOptionalClientScopes(String... defaultOptionalClientScopes) {
            return defaultOptionalClientScopes(List.of(defaultOptionalClientScopes));
        }
        public Builder defaultSignatureAlgorithm(String defaultSignatureAlgorithm) {
            this.defaultSignatureAlgorithm = Objects.requireNonNull(defaultSignatureAlgorithm);
            return this;
        }
        public Builder directGrantFlow(String directGrantFlow) {
            this.directGrantFlow = Objects.requireNonNull(directGrantFlow);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayNameHtml(@Nullable String displayNameHtml) {
            this.displayNameHtml = displayNameHtml;
            return this;
        }
        public Builder dockerAuthenticationFlow(String dockerAuthenticationFlow) {
            this.dockerAuthenticationFlow = Objects.requireNonNull(dockerAuthenticationFlow);
            return this;
        }
        public Builder duplicateEmailsAllowed(Boolean duplicateEmailsAllowed) {
            this.duplicateEmailsAllowed = Objects.requireNonNull(duplicateEmailsAllowed);
            return this;
        }
        public Builder editUsernameAllowed(Boolean editUsernameAllowed) {
            this.editUsernameAllowed = Objects.requireNonNull(editUsernameAllowed);
            return this;
        }
        public Builder emailTheme(String emailTheme) {
            this.emailTheme = Objects.requireNonNull(emailTheme);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder internalId(String internalId) {
            this.internalId = Objects.requireNonNull(internalId);
            return this;
        }
        public Builder internationalizations(List<GetRealmInternationalization> internationalizations) {
            this.internationalizations = Objects.requireNonNull(internationalizations);
            return this;
        }
        public Builder internationalizations(GetRealmInternationalization... internationalizations) {
            return internationalizations(List.of(internationalizations));
        }
        public Builder loginTheme(String loginTheme) {
            this.loginTheme = Objects.requireNonNull(loginTheme);
            return this;
        }
        public Builder loginWithEmailAllowed(Boolean loginWithEmailAllowed) {
            this.loginWithEmailAllowed = Objects.requireNonNull(loginWithEmailAllowed);
            return this;
        }
        public Builder oauth2DeviceCodeLifespan(String oauth2DeviceCodeLifespan) {
            this.oauth2DeviceCodeLifespan = Objects.requireNonNull(oauth2DeviceCodeLifespan);
            return this;
        }
        public Builder oauth2DevicePollingInterval(Integer oauth2DevicePollingInterval) {
            this.oauth2DevicePollingInterval = Objects.requireNonNull(oauth2DevicePollingInterval);
            return this;
        }
        public Builder offlineSessionIdleTimeout(String offlineSessionIdleTimeout) {
            this.offlineSessionIdleTimeout = Objects.requireNonNull(offlineSessionIdleTimeout);
            return this;
        }
        public Builder offlineSessionMaxLifespan(String offlineSessionMaxLifespan) {
            this.offlineSessionMaxLifespan = Objects.requireNonNull(offlineSessionMaxLifespan);
            return this;
        }
        public Builder offlineSessionMaxLifespanEnabled(Boolean offlineSessionMaxLifespanEnabled) {
            this.offlineSessionMaxLifespanEnabled = Objects.requireNonNull(offlineSessionMaxLifespanEnabled);
            return this;
        }
        public Builder otpPolicy(GetRealmOtpPolicy otpPolicy) {
            this.otpPolicy = Objects.requireNonNull(otpPolicy);
            return this;
        }
        public Builder passwordPolicy(String passwordPolicy) {
            this.passwordPolicy = Objects.requireNonNull(passwordPolicy);
            return this;
        }
        public Builder realm(String realm) {
            this.realm = Objects.requireNonNull(realm);
            return this;
        }
        public Builder refreshTokenMaxReuse(Integer refreshTokenMaxReuse) {
            this.refreshTokenMaxReuse = Objects.requireNonNull(refreshTokenMaxReuse);
            return this;
        }
        public Builder registrationAllowed(Boolean registrationAllowed) {
            this.registrationAllowed = Objects.requireNonNull(registrationAllowed);
            return this;
        }
        public Builder registrationEmailAsUsername(Boolean registrationEmailAsUsername) {
            this.registrationEmailAsUsername = Objects.requireNonNull(registrationEmailAsUsername);
            return this;
        }
        public Builder registrationFlow(String registrationFlow) {
            this.registrationFlow = Objects.requireNonNull(registrationFlow);
            return this;
        }
        public Builder rememberMe(Boolean rememberMe) {
            this.rememberMe = Objects.requireNonNull(rememberMe);
            return this;
        }
        public Builder resetCredentialsFlow(String resetCredentialsFlow) {
            this.resetCredentialsFlow = Objects.requireNonNull(resetCredentialsFlow);
            return this;
        }
        public Builder resetPasswordAllowed(Boolean resetPasswordAllowed) {
            this.resetPasswordAllowed = Objects.requireNonNull(resetPasswordAllowed);
            return this;
        }
        public Builder revokeRefreshToken(Boolean revokeRefreshToken) {
            this.revokeRefreshToken = Objects.requireNonNull(revokeRefreshToken);
            return this;
        }
        public Builder securityDefenses(List<GetRealmSecurityDefense> securityDefenses) {
            this.securityDefenses = Objects.requireNonNull(securityDefenses);
            return this;
        }
        public Builder securityDefenses(GetRealmSecurityDefense... securityDefenses) {
            return securityDefenses(List.of(securityDefenses));
        }
        public Builder smtpServers(List<GetRealmSmtpServer> smtpServers) {
            this.smtpServers = Objects.requireNonNull(smtpServers);
            return this;
        }
        public Builder smtpServers(GetRealmSmtpServer... smtpServers) {
            return smtpServers(List.of(smtpServers));
        }
        public Builder sslRequired(String sslRequired) {
            this.sslRequired = Objects.requireNonNull(sslRequired);
            return this;
        }
        public Builder ssoSessionIdleTimeout(String ssoSessionIdleTimeout) {
            this.ssoSessionIdleTimeout = Objects.requireNonNull(ssoSessionIdleTimeout);
            return this;
        }
        public Builder ssoSessionIdleTimeoutRememberMe(String ssoSessionIdleTimeoutRememberMe) {
            this.ssoSessionIdleTimeoutRememberMe = Objects.requireNonNull(ssoSessionIdleTimeoutRememberMe);
            return this;
        }
        public Builder ssoSessionMaxLifespan(String ssoSessionMaxLifespan) {
            this.ssoSessionMaxLifespan = Objects.requireNonNull(ssoSessionMaxLifespan);
            return this;
        }
        public Builder ssoSessionMaxLifespanRememberMe(String ssoSessionMaxLifespanRememberMe) {
            this.ssoSessionMaxLifespanRememberMe = Objects.requireNonNull(ssoSessionMaxLifespanRememberMe);
            return this;
        }
        public Builder userManagedAccess(Boolean userManagedAccess) {
            this.userManagedAccess = Objects.requireNonNull(userManagedAccess);
            return this;
        }
        public Builder verifyEmail(Boolean verifyEmail) {
            this.verifyEmail = Objects.requireNonNull(verifyEmail);
            return this;
        }
        public Builder webAuthnPasswordlessPolicy(GetRealmWebAuthnPasswordlessPolicy webAuthnPasswordlessPolicy) {
            this.webAuthnPasswordlessPolicy = Objects.requireNonNull(webAuthnPasswordlessPolicy);
            return this;
        }
        public Builder webAuthnPolicy(GetRealmWebAuthnPolicy webAuthnPolicy) {
            this.webAuthnPolicy = Objects.requireNonNull(webAuthnPolicy);
            return this;
        }        public GetRealmResult build() {
            return new GetRealmResult(accessCodeLifespan, accessCodeLifespanLogin, accessCodeLifespanUserAction, accessTokenLifespan, accessTokenLifespanForImplicitFlow, accountTheme, actionTokenGeneratedByAdminLifespan, actionTokenGeneratedByUserLifespan, adminTheme, attributes, browserFlow, clientAuthenticationFlow, clientSessionIdleTimeout, clientSessionMaxLifespan, defaultDefaultClientScopes, defaultOptionalClientScopes, defaultSignatureAlgorithm, directGrantFlow, displayName, displayNameHtml, dockerAuthenticationFlow, duplicateEmailsAllowed, editUsernameAllowed, emailTheme, enabled, id, internalId, internationalizations, loginTheme, loginWithEmailAllowed, oauth2DeviceCodeLifespan, oauth2DevicePollingInterval, offlineSessionIdleTimeout, offlineSessionMaxLifespan, offlineSessionMaxLifespanEnabled, otpPolicy, passwordPolicy, realm, refreshTokenMaxReuse, registrationAllowed, registrationEmailAsUsername, registrationFlow, rememberMe, resetCredentialsFlow, resetPasswordAllowed, revokeRefreshToken, securityDefenses, smtpServers, sslRequired, ssoSessionIdleTimeout, ssoSessionIdleTimeoutRememberMe, ssoSessionMaxLifespan, ssoSessionMaxLifespanRememberMe, userManagedAccess, verifyEmail, webAuthnPasswordlessPolicy, webAuthnPolicy);
        }
    }
}
