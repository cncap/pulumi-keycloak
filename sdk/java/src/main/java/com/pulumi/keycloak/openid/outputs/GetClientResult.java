// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.keycloak.openid.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.keycloak.openid.outputs.GetClientAuthenticationFlowBindingOverride;
import com.pulumi.keycloak.openid.outputs.GetClientAuthorization;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientResult {
    private final String accessTokenLifespan;
    private final String accessType;
    private final String adminUrl;
    private final List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
    private final List<GetClientAuthorization> authorizations;
    private final Boolean backchannelLogoutRevokeOfflineSessions;
    private final Boolean backchannelLogoutSessionRequired;
    private final String backchannelLogoutUrl;
    private final String baseUrl;
    private final String clientAuthenticatorType;
    private final String clientId;
    private final String clientOfflineSessionIdleTimeout;
    private final String clientOfflineSessionMaxLifespan;
    private final String clientSecret;
    private final String clientSessionIdleTimeout;
    private final String clientSessionMaxLifespan;
    private final Boolean consentRequired;
    private final @Nullable String consentScreenText;
    private final String description;
    private final Boolean directAccessGrantsEnabled;
    private final @Nullable Boolean displayOnConsentScreen;
    private final Boolean enabled;
    private final Boolean excludeSessionStateFromAuthResponse;
    private final Map<String,Object> extraConfig;
    private final Boolean frontchannelLogoutEnabled;
    private final String frontchannelLogoutUrl;
    private final Boolean fullScopeAllowed;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final Boolean implicitFlowEnabled;
    private final String loginTheme;
    private final String name;
    private final @Nullable Boolean oauth2DeviceAuthorizationGrantEnabled;
    private final @Nullable String oauth2DeviceCodeLifespan;
    private final @Nullable String oauth2DevicePollingInterval;
    private final String pkceCodeChallengeMethod;
    private final String realmId;
    private final String resourceServerId;
    private final String rootUrl;
    private final String serviceAccountUserId;
    private final Boolean serviceAccountsEnabled;
    private final Boolean standardFlowEnabled;
    private final Boolean useRefreshTokens;
    private final Boolean useRefreshTokensClientCredentials;
    private final List<String> validRedirectUris;
    private final List<String> webOrigins;

    @CustomType.Constructor
    private GetClientResult(
        @CustomType.Parameter("accessTokenLifespan") String accessTokenLifespan,
        @CustomType.Parameter("accessType") String accessType,
        @CustomType.Parameter("adminUrl") String adminUrl,
        @CustomType.Parameter("authenticationFlowBindingOverrides") List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides,
        @CustomType.Parameter("authorizations") List<GetClientAuthorization> authorizations,
        @CustomType.Parameter("backchannelLogoutRevokeOfflineSessions") Boolean backchannelLogoutRevokeOfflineSessions,
        @CustomType.Parameter("backchannelLogoutSessionRequired") Boolean backchannelLogoutSessionRequired,
        @CustomType.Parameter("backchannelLogoutUrl") String backchannelLogoutUrl,
        @CustomType.Parameter("baseUrl") String baseUrl,
        @CustomType.Parameter("clientAuthenticatorType") String clientAuthenticatorType,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientOfflineSessionIdleTimeout") String clientOfflineSessionIdleTimeout,
        @CustomType.Parameter("clientOfflineSessionMaxLifespan") String clientOfflineSessionMaxLifespan,
        @CustomType.Parameter("clientSecret") String clientSecret,
        @CustomType.Parameter("clientSessionIdleTimeout") String clientSessionIdleTimeout,
        @CustomType.Parameter("clientSessionMaxLifespan") String clientSessionMaxLifespan,
        @CustomType.Parameter("consentRequired") Boolean consentRequired,
        @CustomType.Parameter("consentScreenText") @Nullable String consentScreenText,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("directAccessGrantsEnabled") Boolean directAccessGrantsEnabled,
        @CustomType.Parameter("displayOnConsentScreen") @Nullable Boolean displayOnConsentScreen,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("excludeSessionStateFromAuthResponse") Boolean excludeSessionStateFromAuthResponse,
        @CustomType.Parameter("extraConfig") Map<String,Object> extraConfig,
        @CustomType.Parameter("frontchannelLogoutEnabled") Boolean frontchannelLogoutEnabled,
        @CustomType.Parameter("frontchannelLogoutUrl") String frontchannelLogoutUrl,
        @CustomType.Parameter("fullScopeAllowed") Boolean fullScopeAllowed,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("implicitFlowEnabled") Boolean implicitFlowEnabled,
        @CustomType.Parameter("loginTheme") String loginTheme,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("oauth2DeviceAuthorizationGrantEnabled") @Nullable Boolean oauth2DeviceAuthorizationGrantEnabled,
        @CustomType.Parameter("oauth2DeviceCodeLifespan") @Nullable String oauth2DeviceCodeLifespan,
        @CustomType.Parameter("oauth2DevicePollingInterval") @Nullable String oauth2DevicePollingInterval,
        @CustomType.Parameter("pkceCodeChallengeMethod") String pkceCodeChallengeMethod,
        @CustomType.Parameter("realmId") String realmId,
        @CustomType.Parameter("resourceServerId") String resourceServerId,
        @CustomType.Parameter("rootUrl") String rootUrl,
        @CustomType.Parameter("serviceAccountUserId") String serviceAccountUserId,
        @CustomType.Parameter("serviceAccountsEnabled") Boolean serviceAccountsEnabled,
        @CustomType.Parameter("standardFlowEnabled") Boolean standardFlowEnabled,
        @CustomType.Parameter("useRefreshTokens") Boolean useRefreshTokens,
        @CustomType.Parameter("useRefreshTokensClientCredentials") Boolean useRefreshTokensClientCredentials,
        @CustomType.Parameter("validRedirectUris") List<String> validRedirectUris,
        @CustomType.Parameter("webOrigins") List<String> webOrigins) {
        this.accessTokenLifespan = accessTokenLifespan;
        this.accessType = accessType;
        this.adminUrl = adminUrl;
        this.authenticationFlowBindingOverrides = authenticationFlowBindingOverrides;
        this.authorizations = authorizations;
        this.backchannelLogoutRevokeOfflineSessions = backchannelLogoutRevokeOfflineSessions;
        this.backchannelLogoutSessionRequired = backchannelLogoutSessionRequired;
        this.backchannelLogoutUrl = backchannelLogoutUrl;
        this.baseUrl = baseUrl;
        this.clientAuthenticatorType = clientAuthenticatorType;
        this.clientId = clientId;
        this.clientOfflineSessionIdleTimeout = clientOfflineSessionIdleTimeout;
        this.clientOfflineSessionMaxLifespan = clientOfflineSessionMaxLifespan;
        this.clientSecret = clientSecret;
        this.clientSessionIdleTimeout = clientSessionIdleTimeout;
        this.clientSessionMaxLifespan = clientSessionMaxLifespan;
        this.consentRequired = consentRequired;
        this.consentScreenText = consentScreenText;
        this.description = description;
        this.directAccessGrantsEnabled = directAccessGrantsEnabled;
        this.displayOnConsentScreen = displayOnConsentScreen;
        this.enabled = enabled;
        this.excludeSessionStateFromAuthResponse = excludeSessionStateFromAuthResponse;
        this.extraConfig = extraConfig;
        this.frontchannelLogoutEnabled = frontchannelLogoutEnabled;
        this.frontchannelLogoutUrl = frontchannelLogoutUrl;
        this.fullScopeAllowed = fullScopeAllowed;
        this.id = id;
        this.implicitFlowEnabled = implicitFlowEnabled;
        this.loginTheme = loginTheme;
        this.name = name;
        this.oauth2DeviceAuthorizationGrantEnabled = oauth2DeviceAuthorizationGrantEnabled;
        this.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
        this.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
        this.pkceCodeChallengeMethod = pkceCodeChallengeMethod;
        this.realmId = realmId;
        this.resourceServerId = resourceServerId;
        this.rootUrl = rootUrl;
        this.serviceAccountUserId = serviceAccountUserId;
        this.serviceAccountsEnabled = serviceAccountsEnabled;
        this.standardFlowEnabled = standardFlowEnabled;
        this.useRefreshTokens = useRefreshTokens;
        this.useRefreshTokensClientCredentials = useRefreshTokensClientCredentials;
        this.validRedirectUris = validRedirectUris;
        this.webOrigins = webOrigins;
    }

    public String accessTokenLifespan() {
        return this.accessTokenLifespan;
    }
    public String accessType() {
        return this.accessType;
    }
    public String adminUrl() {
        return this.adminUrl;
    }
    public List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides() {
        return this.authenticationFlowBindingOverrides;
    }
    public List<GetClientAuthorization> authorizations() {
        return this.authorizations;
    }
    public Boolean backchannelLogoutRevokeOfflineSessions() {
        return this.backchannelLogoutRevokeOfflineSessions;
    }
    public Boolean backchannelLogoutSessionRequired() {
        return this.backchannelLogoutSessionRequired;
    }
    public String backchannelLogoutUrl() {
        return this.backchannelLogoutUrl;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public String clientAuthenticatorType() {
        return this.clientAuthenticatorType;
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientOfflineSessionIdleTimeout() {
        return this.clientOfflineSessionIdleTimeout;
    }
    public String clientOfflineSessionMaxLifespan() {
        return this.clientOfflineSessionMaxLifespan;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public String clientSessionIdleTimeout() {
        return this.clientSessionIdleTimeout;
    }
    public String clientSessionMaxLifespan() {
        return this.clientSessionMaxLifespan;
    }
    public Boolean consentRequired() {
        return this.consentRequired;
    }
    public Optional<String> consentScreenText() {
        return Optional.ofNullable(this.consentScreenText);
    }
    public String description() {
        return this.description;
    }
    public Boolean directAccessGrantsEnabled() {
        return this.directAccessGrantsEnabled;
    }
    public Optional<Boolean> displayOnConsentScreen() {
        return Optional.ofNullable(this.displayOnConsentScreen);
    }
    public Boolean enabled() {
        return this.enabled;
    }
    public Boolean excludeSessionStateFromAuthResponse() {
        return this.excludeSessionStateFromAuthResponse;
    }
    public Map<String,Object> extraConfig() {
        return this.extraConfig;
    }
    public Boolean frontchannelLogoutEnabled() {
        return this.frontchannelLogoutEnabled;
    }
    public String frontchannelLogoutUrl() {
        return this.frontchannelLogoutUrl;
    }
    public Boolean fullScopeAllowed() {
        return this.fullScopeAllowed;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean implicitFlowEnabled() {
        return this.implicitFlowEnabled;
    }
    public String loginTheme() {
        return this.loginTheme;
    }
    public String name() {
        return this.name;
    }
    public Optional<Boolean> oauth2DeviceAuthorizationGrantEnabled() {
        return Optional.ofNullable(this.oauth2DeviceAuthorizationGrantEnabled);
    }
    public Optional<String> oauth2DeviceCodeLifespan() {
        return Optional.ofNullable(this.oauth2DeviceCodeLifespan);
    }
    public Optional<String> oauth2DevicePollingInterval() {
        return Optional.ofNullable(this.oauth2DevicePollingInterval);
    }
    public String pkceCodeChallengeMethod() {
        return this.pkceCodeChallengeMethod;
    }
    public String realmId() {
        return this.realmId;
    }
    public String resourceServerId() {
        return this.resourceServerId;
    }
    public String rootUrl() {
        return this.rootUrl;
    }
    public String serviceAccountUserId() {
        return this.serviceAccountUserId;
    }
    public Boolean serviceAccountsEnabled() {
        return this.serviceAccountsEnabled;
    }
    public Boolean standardFlowEnabled() {
        return this.standardFlowEnabled;
    }
    public Boolean useRefreshTokens() {
        return this.useRefreshTokens;
    }
    public Boolean useRefreshTokensClientCredentials() {
        return this.useRefreshTokensClientCredentials;
    }
    public List<String> validRedirectUris() {
        return this.validRedirectUris;
    }
    public List<String> webOrigins() {
        return this.webOrigins;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accessTokenLifespan;
        private String accessType;
        private String adminUrl;
        private List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides;
        private List<GetClientAuthorization> authorizations;
        private Boolean backchannelLogoutRevokeOfflineSessions;
        private Boolean backchannelLogoutSessionRequired;
        private String backchannelLogoutUrl;
        private String baseUrl;
        private String clientAuthenticatorType;
        private String clientId;
        private String clientOfflineSessionIdleTimeout;
        private String clientOfflineSessionMaxLifespan;
        private String clientSecret;
        private String clientSessionIdleTimeout;
        private String clientSessionMaxLifespan;
        private Boolean consentRequired;
        private @Nullable String consentScreenText;
        private String description;
        private Boolean directAccessGrantsEnabled;
        private @Nullable Boolean displayOnConsentScreen;
        private Boolean enabled;
        private Boolean excludeSessionStateFromAuthResponse;
        private Map<String,Object> extraConfig;
        private Boolean frontchannelLogoutEnabled;
        private String frontchannelLogoutUrl;
        private Boolean fullScopeAllowed;
        private String id;
        private Boolean implicitFlowEnabled;
        private String loginTheme;
        private String name;
        private @Nullable Boolean oauth2DeviceAuthorizationGrantEnabled;
        private @Nullable String oauth2DeviceCodeLifespan;
        private @Nullable String oauth2DevicePollingInterval;
        private String pkceCodeChallengeMethod;
        private String realmId;
        private String resourceServerId;
        private String rootUrl;
        private String serviceAccountUserId;
        private Boolean serviceAccountsEnabled;
        private Boolean standardFlowEnabled;
        private Boolean useRefreshTokens;
        private Boolean useRefreshTokensClientCredentials;
        private List<String> validRedirectUris;
        private List<String> webOrigins;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClientResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTokenLifespan = defaults.accessTokenLifespan;
    	      this.accessType = defaults.accessType;
    	      this.adminUrl = defaults.adminUrl;
    	      this.authenticationFlowBindingOverrides = defaults.authenticationFlowBindingOverrides;
    	      this.authorizations = defaults.authorizations;
    	      this.backchannelLogoutRevokeOfflineSessions = defaults.backchannelLogoutRevokeOfflineSessions;
    	      this.backchannelLogoutSessionRequired = defaults.backchannelLogoutSessionRequired;
    	      this.backchannelLogoutUrl = defaults.backchannelLogoutUrl;
    	      this.baseUrl = defaults.baseUrl;
    	      this.clientAuthenticatorType = defaults.clientAuthenticatorType;
    	      this.clientId = defaults.clientId;
    	      this.clientOfflineSessionIdleTimeout = defaults.clientOfflineSessionIdleTimeout;
    	      this.clientOfflineSessionMaxLifespan = defaults.clientOfflineSessionMaxLifespan;
    	      this.clientSecret = defaults.clientSecret;
    	      this.clientSessionIdleTimeout = defaults.clientSessionIdleTimeout;
    	      this.clientSessionMaxLifespan = defaults.clientSessionMaxLifespan;
    	      this.consentRequired = defaults.consentRequired;
    	      this.consentScreenText = defaults.consentScreenText;
    	      this.description = defaults.description;
    	      this.directAccessGrantsEnabled = defaults.directAccessGrantsEnabled;
    	      this.displayOnConsentScreen = defaults.displayOnConsentScreen;
    	      this.enabled = defaults.enabled;
    	      this.excludeSessionStateFromAuthResponse = defaults.excludeSessionStateFromAuthResponse;
    	      this.extraConfig = defaults.extraConfig;
    	      this.frontchannelLogoutEnabled = defaults.frontchannelLogoutEnabled;
    	      this.frontchannelLogoutUrl = defaults.frontchannelLogoutUrl;
    	      this.fullScopeAllowed = defaults.fullScopeAllowed;
    	      this.id = defaults.id;
    	      this.implicitFlowEnabled = defaults.implicitFlowEnabled;
    	      this.loginTheme = defaults.loginTheme;
    	      this.name = defaults.name;
    	      this.oauth2DeviceAuthorizationGrantEnabled = defaults.oauth2DeviceAuthorizationGrantEnabled;
    	      this.oauth2DeviceCodeLifespan = defaults.oauth2DeviceCodeLifespan;
    	      this.oauth2DevicePollingInterval = defaults.oauth2DevicePollingInterval;
    	      this.pkceCodeChallengeMethod = defaults.pkceCodeChallengeMethod;
    	      this.realmId = defaults.realmId;
    	      this.resourceServerId = defaults.resourceServerId;
    	      this.rootUrl = defaults.rootUrl;
    	      this.serviceAccountUserId = defaults.serviceAccountUserId;
    	      this.serviceAccountsEnabled = defaults.serviceAccountsEnabled;
    	      this.standardFlowEnabled = defaults.standardFlowEnabled;
    	      this.useRefreshTokens = defaults.useRefreshTokens;
    	      this.useRefreshTokensClientCredentials = defaults.useRefreshTokensClientCredentials;
    	      this.validRedirectUris = defaults.validRedirectUris;
    	      this.webOrigins = defaults.webOrigins;
        }

        public Builder accessTokenLifespan(String accessTokenLifespan) {
            this.accessTokenLifespan = Objects.requireNonNull(accessTokenLifespan);
            return this;
        }
        public Builder accessType(String accessType) {
            this.accessType = Objects.requireNonNull(accessType);
            return this;
        }
        public Builder adminUrl(String adminUrl) {
            this.adminUrl = Objects.requireNonNull(adminUrl);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(List<GetClientAuthenticationFlowBindingOverride> authenticationFlowBindingOverrides) {
            this.authenticationFlowBindingOverrides = Objects.requireNonNull(authenticationFlowBindingOverrides);
            return this;
        }
        public Builder authenticationFlowBindingOverrides(GetClientAuthenticationFlowBindingOverride... authenticationFlowBindingOverrides) {
            return authenticationFlowBindingOverrides(List.of(authenticationFlowBindingOverrides));
        }
        public Builder authorizations(List<GetClientAuthorization> authorizations) {
            this.authorizations = Objects.requireNonNull(authorizations);
            return this;
        }
        public Builder authorizations(GetClientAuthorization... authorizations) {
            return authorizations(List.of(authorizations));
        }
        public Builder backchannelLogoutRevokeOfflineSessions(Boolean backchannelLogoutRevokeOfflineSessions) {
            this.backchannelLogoutRevokeOfflineSessions = Objects.requireNonNull(backchannelLogoutRevokeOfflineSessions);
            return this;
        }
        public Builder backchannelLogoutSessionRequired(Boolean backchannelLogoutSessionRequired) {
            this.backchannelLogoutSessionRequired = Objects.requireNonNull(backchannelLogoutSessionRequired);
            return this;
        }
        public Builder backchannelLogoutUrl(String backchannelLogoutUrl) {
            this.backchannelLogoutUrl = Objects.requireNonNull(backchannelLogoutUrl);
            return this;
        }
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }
        public Builder clientAuthenticatorType(String clientAuthenticatorType) {
            this.clientAuthenticatorType = Objects.requireNonNull(clientAuthenticatorType);
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientOfflineSessionIdleTimeout(String clientOfflineSessionIdleTimeout) {
            this.clientOfflineSessionIdleTimeout = Objects.requireNonNull(clientOfflineSessionIdleTimeout);
            return this;
        }
        public Builder clientOfflineSessionMaxLifespan(String clientOfflineSessionMaxLifespan) {
            this.clientOfflineSessionMaxLifespan = Objects.requireNonNull(clientOfflineSessionMaxLifespan);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder clientSessionIdleTimeout(String clientSessionIdleTimeout) {
            this.clientSessionIdleTimeout = Objects.requireNonNull(clientSessionIdleTimeout);
            return this;
        }
        public Builder clientSessionMaxLifespan(String clientSessionMaxLifespan) {
            this.clientSessionMaxLifespan = Objects.requireNonNull(clientSessionMaxLifespan);
            return this;
        }
        public Builder consentRequired(Boolean consentRequired) {
            this.consentRequired = Objects.requireNonNull(consentRequired);
            return this;
        }
        public Builder consentScreenText(@Nullable String consentScreenText) {
            this.consentScreenText = consentScreenText;
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder directAccessGrantsEnabled(Boolean directAccessGrantsEnabled) {
            this.directAccessGrantsEnabled = Objects.requireNonNull(directAccessGrantsEnabled);
            return this;
        }
        public Builder displayOnConsentScreen(@Nullable Boolean displayOnConsentScreen) {
            this.displayOnConsentScreen = displayOnConsentScreen;
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder excludeSessionStateFromAuthResponse(Boolean excludeSessionStateFromAuthResponse) {
            this.excludeSessionStateFromAuthResponse = Objects.requireNonNull(excludeSessionStateFromAuthResponse);
            return this;
        }
        public Builder extraConfig(Map<String,Object> extraConfig) {
            this.extraConfig = Objects.requireNonNull(extraConfig);
            return this;
        }
        public Builder frontchannelLogoutEnabled(Boolean frontchannelLogoutEnabled) {
            this.frontchannelLogoutEnabled = Objects.requireNonNull(frontchannelLogoutEnabled);
            return this;
        }
        public Builder frontchannelLogoutUrl(String frontchannelLogoutUrl) {
            this.frontchannelLogoutUrl = Objects.requireNonNull(frontchannelLogoutUrl);
            return this;
        }
        public Builder fullScopeAllowed(Boolean fullScopeAllowed) {
            this.fullScopeAllowed = Objects.requireNonNull(fullScopeAllowed);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder implicitFlowEnabled(Boolean implicitFlowEnabled) {
            this.implicitFlowEnabled = Objects.requireNonNull(implicitFlowEnabled);
            return this;
        }
        public Builder loginTheme(String loginTheme) {
            this.loginTheme = Objects.requireNonNull(loginTheme);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder oauth2DeviceAuthorizationGrantEnabled(@Nullable Boolean oauth2DeviceAuthorizationGrantEnabled) {
            this.oauth2DeviceAuthorizationGrantEnabled = oauth2DeviceAuthorizationGrantEnabled;
            return this;
        }
        public Builder oauth2DeviceCodeLifespan(@Nullable String oauth2DeviceCodeLifespan) {
            this.oauth2DeviceCodeLifespan = oauth2DeviceCodeLifespan;
            return this;
        }
        public Builder oauth2DevicePollingInterval(@Nullable String oauth2DevicePollingInterval) {
            this.oauth2DevicePollingInterval = oauth2DevicePollingInterval;
            return this;
        }
        public Builder pkceCodeChallengeMethod(String pkceCodeChallengeMethod) {
            this.pkceCodeChallengeMethod = Objects.requireNonNull(pkceCodeChallengeMethod);
            return this;
        }
        public Builder realmId(String realmId) {
            this.realmId = Objects.requireNonNull(realmId);
            return this;
        }
        public Builder resourceServerId(String resourceServerId) {
            this.resourceServerId = Objects.requireNonNull(resourceServerId);
            return this;
        }
        public Builder rootUrl(String rootUrl) {
            this.rootUrl = Objects.requireNonNull(rootUrl);
            return this;
        }
        public Builder serviceAccountUserId(String serviceAccountUserId) {
            this.serviceAccountUserId = Objects.requireNonNull(serviceAccountUserId);
            return this;
        }
        public Builder serviceAccountsEnabled(Boolean serviceAccountsEnabled) {
            this.serviceAccountsEnabled = Objects.requireNonNull(serviceAccountsEnabled);
            return this;
        }
        public Builder standardFlowEnabled(Boolean standardFlowEnabled) {
            this.standardFlowEnabled = Objects.requireNonNull(standardFlowEnabled);
            return this;
        }
        public Builder useRefreshTokens(Boolean useRefreshTokens) {
            this.useRefreshTokens = Objects.requireNonNull(useRefreshTokens);
            return this;
        }
        public Builder useRefreshTokensClientCredentials(Boolean useRefreshTokensClientCredentials) {
            this.useRefreshTokensClientCredentials = Objects.requireNonNull(useRefreshTokensClientCredentials);
            return this;
        }
        public Builder validRedirectUris(List<String> validRedirectUris) {
            this.validRedirectUris = Objects.requireNonNull(validRedirectUris);
            return this;
        }
        public Builder validRedirectUris(String... validRedirectUris) {
            return validRedirectUris(List.of(validRedirectUris));
        }
        public Builder webOrigins(List<String> webOrigins) {
            this.webOrigins = Objects.requireNonNull(webOrigins);
            return this;
        }
        public Builder webOrigins(String... webOrigins) {
            return webOrigins(List.of(webOrigins));
        }        public GetClientResult build() {
            return new GetClientResult(accessTokenLifespan, accessType, adminUrl, authenticationFlowBindingOverrides, authorizations, backchannelLogoutRevokeOfflineSessions, backchannelLogoutSessionRequired, backchannelLogoutUrl, baseUrl, clientAuthenticatorType, clientId, clientOfflineSessionIdleTimeout, clientOfflineSessionMaxLifespan, clientSecret, clientSessionIdleTimeout, clientSessionMaxLifespan, consentRequired, consentScreenText, description, directAccessGrantsEnabled, displayOnConsentScreen, enabled, excludeSessionStateFromAuthResponse, extraConfig, frontchannelLogoutEnabled, frontchannelLogoutUrl, fullScopeAllowed, id, implicitFlowEnabled, loginTheme, name, oauth2DeviceAuthorizationGrantEnabled, oauth2DeviceCodeLifespan, oauth2DevicePollingInterval, pkceCodeChallengeMethod, realmId, resourceServerId, rootUrl, serviceAccountUserId, serviceAccountsEnabled, standardFlowEnabled, useRefreshTokens, useRefreshTokensClientCredentials, validRedirectUris, webOrigins);
        }
    }
}
